[{"path":"https://quartzbio.github.io/quartzbio.edp/articles/Filters.html","id":"filters-function","dir":"Articles","previous_headings":"","what":"filters() function","title":"Filters","text":"filters() parses maths-like syntax used Dataset_query(). now works original column names fields titles. available Filter operators documented : solvebio API","code":"library(quartzbio.edp, quiet = TRUE) Sys.setenv(EDP_PROFILE = \"vsim-dev_rw\") ds <- Dataset(full_path =  \"quartzbio:Public:/TCGA/2.0.0-2018-mc3-v0.2.8/PatientsDiseases\") #> Loading required package: RcppSimdJson #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... df1 <- Dataset_query(ds, limit = 2000) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... #> took 0.169 to process the meta data. dplyr::count(df1, DISEASE) #>   DISEASE   n #> 1     ACC  76 #> 2    BLCA 399 #> 3    BRCA 981 #> 4    CESC 272 #> 5    CHOL  36 #> 6    COAD 236"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/Filters.html","id":"simple-filter","dir":"Articles","previous_headings":"","what":"Simple filter","title":"Filters","text":"","code":"# build a filter list with the new syntax fi <- filters('disease = \"BLCA\"') dplyr::glimpse(fi) #> List of 1 #>  $ :List of 2 #>   ..$ : chr \"disease\" #>   ..$ : chr \"BLCA\" df1 <- Dataset_query(ds,  filters = fi, limit = 2000) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... #> took 0.162 to process the meta data. dplyr::count(df1, DISEASE) #>   DISEASE   n #> 1    BLCA 399  # how to obtain original column names matching the Fields fields <- as.data.frame(DatasetFields(ds)) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... fields[, c('title', 'name')] #>                           title            name #> patient_barcode PATIENT_BARCODE patient_barcode #> sample_barcode   SAMPLE_BARCODE  sample_barcode #> disease                 DISEASE         disease #> subtype                 SUBTYPE         subtype #> _commit                 _commit         _commit  # filter does not work as we used the capitalized DISEASE Field within this filter  fi <- filters('DISEASE = \"BLCA\"') try(df1 <- Dataset_query(ds,  filters = fi, limit = 2000)) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #> Error : API error: Invalid field \"DISEASE\" used in filter. Did you mean \"disease\"?"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/Filters.html","id":"combined-filters","dir":"Articles","previous_headings":"","what":"Combined Filters","title":"Filters","text":"","code":"fi <- filters('(disease = \"BLCA\") AND (sample_barcode regexp \".*-4.*\")') df <- Dataset_query(ds, filters = fi) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... #> took 0.165 to process the meta data. dplyr::slice_sample(df, n = 3) #>   PATIENT_BARCODE  SAMPLE_BARCODE DISEASE        SUBTYPE #> 1    TCGA-4Z-AA7O TCGA-4Z-AA7O-01    BLCA Not_Applicable #> 2    TCGA-4Z-AA83 TCGA-4Z-AA83-01    BLCA Not_Applicable #> 3    TCGA-4Z-AA80 TCGA-4Z-AA80-01    BLCA Not_Applicable"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/Filters.html","id":"use-json-filters","dir":"Articles","previous_headings":"","what":"Use JSON filters","title":"Filters","text":"Filters can also passed Dataset_query() JSON format (string). convenient example use filters generated EDP web UI.","code":"# the same filter but  using the JSON format   fi <- filters('(disease = \"BLCA\") AND (sample_barcode regexp \".*-4.*\")')  # generates the json version of the filter fi_json <- jsonlite::toJSON(fi, pretty =TRUE, auto_unbox= TRUE) fi_json #> [ #>   { #>     \"and\": [ #>       [ #>         \"disease\", #>         \"BLCA\" #>       ], #>       [ #>         \"sample_barcode__regexp\", #>         \".*-4.*\" #>       ] #>     ] #>   } #> ] df_json <- Dataset_query(ds, filters = fi_json) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... #> took 0.263 to process the meta data. dplyr::slice_sample(df_json, n = 3) #>   PATIENT_BARCODE  SAMPLE_BARCODE DISEASE        SUBTYPE #> 1    TCGA-4Z-AA7Y TCGA-4Z-AA7Y-01    BLCA Not_Applicable #> 2    TCGA-4Z-AA7O TCGA-4Z-AA7O-01    BLCA Not_Applicable #> 3    TCGA-4Z-AA86 TCGA-4Z-AA86-01    BLCA Not_Applicable # results are identical all.equal(df_json, df) #> [1] TRUE"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/Parallelisation.html","id":"read-only-part-of-data","dir":"Articles","previous_headings":"","what":"Read only part of data","title":"Parallelisation","text":"","code":"library(quartzbio.edp, quiet = TRUE) Sys.setenv(EDP_PROFILE = \"vsim-dev_rw\")   # contains > 3 millions of rows ds <- Dataset(full_path =  \"quartzbio:Public:/TCGA/2.0.0-2018-mc3-v0.2.8/PatientsDiseases\") #> Loading required package: RcppSimdJson #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... ds$documents_count #> [1] 9125  # fetch first 1000 rows system.time(df1 <- Dataset_query(ds, limit = 1000, meta = FALSE)) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #>    user  system elapsed  #>   0.006   0.000   0.173 dplyr::slice_sample(df1, n=4) #>          subtype patient_barcode disease  sample_barcode #> 1          Basal    TCGA-AN-A0XU    BRCA TCGA-AN-A0XU-01 #> 2           Her2    TCGA-A2-A0CX    BRCA TCGA-A2-A0CX-01 #> 3           LumA    TCGA-AC-A23E    BRCA TCGA-AC-A23E-01 #> 4 Not_Applicable    TCGA-OR-A5JB     ACC TCGA-OR-A5JB-01"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/Parallelisation.html","id":"read-all-data","dir":"Articles","previous_headings":"","what":"Read all data","title":"Parallelisation","text":"","code":"# getting all, and showing progression library(progressr)  # no parallelisation # with_progress: add a progress bar only for specific call with_progress(system.time(df <- fetch_all(df1, workers = 1, verbose = FALSE))) #>    user  system elapsed  #>   0.217   0.024   1.811  # using workers to parallelize queries within the EDP host. # default is to use 4 workers with_progress(system.time(df <- fetch_all(df1, verbose = FALSE))) #>    user  system elapsed  #>   0.167   0.000   1.311"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/Parallelisation.html","id":"estimate-download-time","dir":"Articles","previous_headings":"","what":"Estimate download time","title":"Parallelisation","text":"","code":"dsbig <- Dataset(full_path = \"quartzbio:Public:/TCGA/2.0.0-2018-mc3-v0.2.8/SomaticMutations-GRCh37\") #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... # contains more than 3 millions of rows dsbig$documents_count #> [1] 3603497 # default max page size limit is 10,000 in EDP # some attributes can be useful to anticipate the time needed to obtain the complete dataset dfb <- Dataset_query(dsbig, limit = 1000, meta = FALSE) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959547506112563037/data... attrs <- attributes(dfb)  # Total number of rows attrs$total #> [1] 3603497  # Pagination info: index, number of pages, total number of rows and chosen page size,  attrs$pagination$page_index #> $index #> [1] 1 #>  #> $nb #> [1] 3604 #>  #> $total #> [1] 3603497 #>  #> $size #> [1] 1000"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/connection.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TL;DR","title":"Connection to EDP hosts","text":"Save ~/.qb/edp.json files, different EDP configuration profiles. default profile used automatically functions connection specified arguments.","code":"{   \"default\": {     \"secret\": \"API_TOKEN\",     \"host\": \"https://api.solvebio.com\"   },   \"demo-corp\":  {     \"secret\": \"API_TOKEN_2\",     \"host\": \"https://demo-corp.api.solvebio.com\"   } } # by default all functions will use the default profile set in the default config file library(quartzbio.edp, quiet = TRUE) User() #> Loading required package: RcppSimdJson #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member vlst <- Vaults() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... vlst[[1]] #> Vault \"vsim-dev:dandan-test\" (\"\", general, Rwa), @ \"Dandan Xu\", updated at:2023-02-13T19:13:48.825Z  flds <- Folders() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... flds[[1]] #> folder \"vsim-dev:Public Data Dev:/ClinGen\" (application/vnd.solvebio.folder) nb:0 user:David Caplan accessed:2023-02-15T20:07:39.539Z  fis  <- Files() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... fis[[1]] #> file \"vsim-dev:Public Data Dev:/ClinGen/ClinGen-1-0-0-2015-06-02-Genes-1098056416333778650-20230215200640.json.gz\" (gzip) nb:562 user:David Caplan accessed:2023-02-15T20:07:46.945Z  das  <-Datasets() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... das[[1]] #> dataset \"vsim-dev:Public Data Dev:/ClinGen/Genes\" (application/vnd.solvebio.dataset) nb:562 user:David Caplan accessed:2023-04-18T22:23:03Z"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/connection.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Connection to EDP hosts","text":"several methods connected EDP instance. using explicit connection using environment variables using profiles using autoconnect() key: designates API key (deprecated supported anymore future) token: designates API token secret: can key token token connections based highly recommended","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/connection.html","id":"connection-from-profiles","dir":"Articles","previous_headings":"","what":"Connection from Profiles","title":"Connection to EDP hosts","text":"Different EDP environment profiles config can stored default config location home directory: ~/.qb/edp.json least single default profile defined examplified . default profile witl set default connection, explicit connection specified using environment variables.","code":"# use the default profile User() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member  # use explicitely the default profile conn <- connect_with_profile() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token User(conn) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member  # use  profile named demo-corp defined in the default config file without # changing the current connection conn <- connect_with_profile('demo-corp') #> GET https://demo-corp.api.solvebio.com/v1/user... #> Connected to https://demo-corp.api.solvebio.com with user \"Karl Forner\" using an API Token User(conn) #> GET https://demo-corp.api.solvebio.com/v1/user... #> EDP user \"Karl Forner\"(karl.forner.prod.admin) role:member Vaults(conn = conn) #> GET https://demo-corp.api.solvebio.com/v2/vaults... #> List of 3 Vaults #>     id      name           full_path      user_name vault_type               created_at #> 1 5527      GWAS      demo-corp:GWAS   Joseph Henry    general 2022-07-11T20:17:24.029Z #> 2 2956    public     solvebio:public SolveBio Staff    general 2017-07-28T18:13:37.596Z #> 3 6489 user-4739 demo-corp:user-4739    Karl Forner       user 2023-05-30T09:50:56.085Z  # still using the default profile # because no explicit profile connection is given in argument vaults_df <- as.data.frame(Vaults()) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... dplyr::sample_n(vaults_df[, c(4,5:8)], 4) #>                 created_at default_storage_class #> 1 2023-01-27T16:17:17.108Z                  NULL #> 2 2022-11-02T23:38:43.735Z                  NULL #> 3 2022-10-31T21:20:03.587Z                  NULL #> 4 2023-05-18T23:36:53.859Z                  NULL #>                                                                                                                                                                                         description #> 1 This is your personal vault. The contents of your personal vault are private and cannot be accessed by others. To share items in your personal vault, please copy or move them to a shared vaultsed primarily for Repare NGS data extraction annotation #>                full_path has_children #> 1       vsim-dev:user-51         TRUE #> 2       quartzbio:Public         TRUE #> 3 vsim-dev:vSIM SAMPNAME         TRUE #> 4        vsim-dev:Repare         TRUE"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/connection.html","id":"connection-from-system-environment-variables","dir":"Articles","previous_headings":"","what":"Connection From System Environment variables","title":"Connection to EDP hosts","text":"default profile config available, environment variables EDP_PROFILE EDP_CONFIG explored obtain profile name. way several config files, containing different profiles can used switching environment variables. Setting EDP_PROFILE ‘default’ EDP_CONFIG ‘~/.qb/edp.json’ equivalent use default package settings. good practice profiles defined EDP_CONFIG file set EDP_PROFILE environment variable beginning scripts. remaining connections automatically use .","code":"# set the demo-corp connection as the default for future connections  Sys.getenv('EDP_PROFILE') #> [1] \"\" Sys.setenv(EDP_PROFILE = 'demo-corp') User() #> GET https://demo-corp.api.solvebio.com/v1/user... #> Connected to https://demo-corp.api.solvebio.com with user \"Karl Forner\" using an API Token #> GET https://demo-corp.api.solvebio.com/v1/user... #> EDP user \"Karl Forner\"(karl.forner.prod.admin) role:member"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/connection.html","id":"explicit-connection","dir":"Articles","previous_headings":"","what":"Explicit connection","title":"Connection to EDP hosts","text":"secret host can set explicitely. read_connection returns connection infos given config.","code":"conn <- read_connection_profile('default') secret <- conn$secret host <- conn$host conn <- connect(secret, host) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token User(conn) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/connection.html","id":"autoconnect","dir":"Articles","previous_headings":"","what":"autoconnect()","title":"Connection to EDP hosts","text":"autoconnect() function tries connect using environment variables EDP_PROFILE EDP_CONFIG first default profile default config file.","code":"# auto connect use the EDP profile to set the current connection Sys.setenv(EDP_PROFILE = 'demo-corp') conn <- autoconnect() User(conn = conn) #> GET https://demo-corp.api.solvebio.com/v1/user... #> EDP user \"Karl Forner\"(karl.forner.prod.admin) role:member User() #> GET https://demo-corp.api.solvebio.com/v1/user... #> EDP user \"Karl Forner\"(karl.forner.prod.admin) role:member   # unset the EDP_PROFILE environment variable # autoconnect() use the default settings. Sys.unsetenv('EDP_PROFILE') # unset current profile environment variables set_connection(NULL) # unset current connection  conn <- autoconnect()  # Will used the default profile User(conn=conn) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member User() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member"},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/connection.html","id":"set_connection-and-get_connection","dir":"Articles","previous_headings":"","what":"set_connection() and get_connection()","title":"Connection to EDP hosts","text":"far connection objects (.e list) passed arguments functions User() Vaults(). Still theses functions can use current connection. default, connection argument given function(). current connection set default connection. get_connection() returns current connection. none yet available auto=TRUE, use autoconnect() obtain sets current one. set_connection(): explicitely sets current connection","code":"# explicitely set the connection with a profile set_connection( connect_with_profile('demo-corp')) #> GET https://demo-corp.api.solvebio.com/v1/user... #> Connected to https://demo-corp.api.solvebio.com with user \"Karl Forner\" using an API Token #> GET https://demo-corp.api.solvebio.com/v1/user... #> Connected to https://demo-corp.api.solvebio.com with user \"Karl Forner\" using an API Token  # remove the current connection set_connection(NULL)  # the firt call to User() sets the current default connection to the default connection # both calls will use the current connection  User() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member User(conn = get_connection()) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member  # the current connection remains the 'default' # connecting with a profile did not change it conn_corp <- connect_with_profile('demo-corp') #> GET https://demo-corp.api.solvebio.com/v1/user... #> Connected to https://demo-corp.api.solvebio.com with user \"Karl Forner\" using an API Token User(conn_corp) #> GET https://demo-corp.api.solvebio.com/v1/user... #> EDP user \"Karl Forner\"(karl.forner.prod.admin) role:member User() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> EDP user \"Karl Forner\"(karl.forner.test.admin) role:member  # the current connection will be the 'demo-corp' one  # after unsetting the previous connection and profile environment variables Sys.setenv(EDP_PROFILE = 'demo-corp') set_connection(NULL) User() #> GET https://demo-corp.api.solvebio.com/v1/user... #> Connected to https://demo-corp.api.solvebio.com with user \"Karl Forner\" using an API Token #> GET https://demo-corp.api.solvebio.com/v1/user... #> EDP user \"Karl Forner\"(karl.forner.prod.admin) role:member"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TL;DR","title":"Vaults, Files, Datasets and Objects","text":"","code":"library(quartzbio.edp, quiet = TRUE) Sys.getenv('EDP_PROFILE') #> [1] \"\" Sys.setenv(EDP_PROFILE = 'vsim-dev_rw') Sys.getenv('EDP_PROFILE') #> [1] \"vsim-dev_rw\"  vlts <- Vaults() #> Loading required package: RcppSimdJson #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> Connected to https://vsim-dev.api.edp.aws.quartz.bio with user \"Karl Forner\" using an API Token #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... u <- User() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... u$first_name #> [1] \"Karl\" vme <- Vault_create(paste0('vault_', u$first_name)) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults...  Vault(id = vme) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults/2666... #> Vault \"vsim-dev:vault_Karl\" (\"\", general, RWA), @ \"Karl Forner\", updated at:2023-06-06T09:54:59.653Z Folder_create(vme, 'data/cyto') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> folder \"vsim-dev:vault_Karl:/data/cyto\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:00.418Z Folder_create(vme, 'data/flow') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> folder \"vsim-dev:vault_Karl:/data/flow\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:00.751Z Folder_create(vme, 'source/code') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> folder \"vsim-dev:vault_Karl:/source/code\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:01.261Z Folders(vault_id=vme) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 5 Objects #>           path object_type vault_name   user_name            last_modified #> 1        /data      folder vault_Karl Karl Forner 2023-06-06T09:55:00.189Z #> 2   /data/cyto      folder vault_Karl Karl Forner 2023-06-06T09:55:00.418Z #> 3   /data/flow      folder vault_Karl Karl Forner 2023-06-06T09:55:00.751Z #> 4      /source      folder vault_Karl Karl Forner 2023-06-06T09:55:01.079Z #> 5 /source/code      folder vault_Karl Karl Forner 2023-06-06T09:55:01.261Z  delete(vme) #> DELETE https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults/2666... #> Vault \"vsim-dev:vault_Karl\" (\"\", general, rwa), @ \"Karl Forner\", updated at:2023-06-06T09:55:01.660Z"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"user","dir":"Articles","previous_headings":"","what":"User","title":"Vaults, Files, Datasets and Objects","text":"","code":"# select an EDP instance using a profile  u <- User() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... u$first_name #> [1] \"Karl\" u$last_name #> [1] \"Forner\" u$full_name #> [1] \"Karl Forner\" u$id #> [1] 51 u$email #> [1] \"karl.forner@precisionformedicine.com\" u$account$name #> [1] \"vsim-dev\" u$url #> [1] \"https://vsim-dev.api.edp.aws.quartz.bio/v1/users/51\""},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"vaults","dir":"Articles","previous_headings":"","what":"Vaults","title":"Vaults, Files, Datasets and Objects","text":"","code":"# select an EDP instance using a profile Sys.setenv(EDP_PROFILE = 'vsim-dev_rw') # fetch personnal vault info myV <- Vault() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v1/user... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... # personal vault: user-id myV$name #> [1] \"user-51\" myV$full_path  #> [1] \"vsim-dev:user-51\" myV$has_children   #> [1] TRUE myV$has_folder_children #> [1] TRUE myV$user$full_name #> [1] \"Karl Forner\" myV$permissions #> $read #> [1] TRUE #>  #> $write #> [1] TRUE #>  #> $admin #> [1] FALSE"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"vault-creation","dir":"Articles","previous_headings":"","what":"Vault creation","title":"Vaults, Files, Datasets and Objects","text":"","code":"# create a vault v <- Vault_create('vault_test_1', description = 'test_1', tags = list('tag1', 'tag2')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... v$name #> [1] \"vault_test_1\" v$full_path #> [1] \"vsim-dev:vault_test_1\"  # retrieve a vault by name Vault(name = 'vault_test_1') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... #> Vault \"vsim-dev:vault_test_1\" (\"test_1\", general, RWA), @ \"Karl Forner\", updated at:2023-06-06T09:55:02.501Z  # retrieve a vault by full_path Vault(full_path = v$full_path) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... #> Vault \"vsim-dev:vault_test_1\" (\"test_1\", general, RWA), @ \"Karl Forner\", updated at:2023-06-06T09:55:02.501Z  v$description #> [1] \"test_1\" v$metadata #> NULL v$tags #> [[1]] #> [1] \"tag1\" #>  #> [[2]] #> [1] \"tag2\"  # update metadata new_name <- 'test_one' v2 <- Vault_update(v,        name = new_name,        description = 'barabor',        metadata = list(meta_1 = 'foo'),        storage_class = 'Performance', tags = 'tag_A') #> PUT https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults/2667...  v3 <- update(v2, storage_class = 'Temporary') #> PUT https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults/2667..."},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"vaults-listing-limit-and-paging","dir":"Articles","previous_headings":"","what":"Vaults listing, limit and paging","title":"Vaults, Files, Datasets and Objects","text":"Vaults ordered per locale “LC_TIME”, “us” Intermediate pages can sized using limit fetch_next fetch_all use limit","code":"# get the firt two ordered vaults vs1 <- Vaults(limit = 2, page = 1) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults...  # get the the third and fourth vault Vaults(limit = 2, page = 2) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... #> List of 2 Vaults #>     id            name                full_path      user_name vault_type               created_at #> 1   19          Public         quartzbio:Public Admin Dev user    general 2022-11-02T23:38:43.735Z #> 2 1300 Public Data Dev vsim-dev:Public Data Dev   David Caplan    general 2023-02-15T20:07:31.859Z  # same as above vs2 <- fetch_next(vs1) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... vs2 #> List of 2 Vaults #>     id            name                full_path      user_name vault_type               created_at #> 1   19          Public         quartzbio:Public Admin Dev user    general 2022-11-02T23:38:43.735Z #> 2 1300 Public Data Dev vsim-dev:Public Data Dev   David Caplan    general 2023-02-15T20:07:31.859Z  # fetch all remaining vaults by pages of size 2 all_vlts <- fetch_all(vs1) all_vlts_df <- as.data.frame(all_vlts)  # delete vault delete(v) #> DELETE https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults/2667... #> Vault \"vsim-dev:test_one\" (\"barabor\", general, rwa), @ \"Karl Forner\", updated at:2023-06-06T09:55:04.616Z"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"folders","dir":"Articles","previous_headings":"","what":"Folders","title":"Vaults, Files, Datasets and Objects","text":"","code":"# list all folders in an account, recursive by default all_folders <- Folders() #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects...  # control depth  suppressMessages(Folders(depth=0)) #> EDP List of 18 Objects #>                    path object_type      vault_name           user_name            last_modified #> 1              /ClinGen      folder Public Data Dev        David Caplan 2023-02-15T20:07:39.539Z #> 2              /ClinVar      folder          Public        David Caplan 2022-11-10T19:46:56.464Z #> 3  /Dandan Testing CTMS      folder             ICF           Dandan Xu 2023-02-03T01:11:53.077Z #> 4                 /dir1      folder         user-51         Karl Forner 2023-03-02T14:02:17.545Z #> 5              /GENCODE      folder          Public        David Caplan 2022-11-13T01:24:41.193Z #> 6                 /HGNC      folder          Public        David Caplan 2022-11-02T23:42:11.247Z #> 7              /MEDLINE      folder          Public        David Caplan 2022-11-03T00:22:13.193Z #> 8            /recursive      folder         user-51         Karl Forner 2023-03-02T14:56:40.353Z #> 9           /r_examples      folder         user-51         Karl Forner 2023-03-17T10:31:37.489Z #> 10          /RP-3500-01      folder          Repare           Dandan Xu 2023-05-31T11:50:36.803Z #> 11          /RP-3500-03      folder          Repare           Dandan Xu 2023-05-31T11:50:49.098Z #> 12          /RP-6306-01      folder          Repare           Dandan Xu 2023-05-30T13:18:28.112Z #> 13          /RP-6306-02      folder          Repare           Dandan Xu 2023-05-30T13:18:32.991Z #> 14          /RP-6306-03      folder          Repare           Dandan Xu 2023-05-31T11:50:44.259Z #> 15 /Study ICF Templates      folder             ICF           Dandan Xu 2023-02-03T00:52:20.747Z #> 16                /TCGA      folder          Public Tatjana Damnjanovic 2023-01-18T12:07:10.392Z #> 17             /Testing      folder          Repare           Dandan Xu 2023-05-30T13:20:02.640Z #> 18                  /v1      folder         user-51         Karl Forner 2023-05-11T08:44:15.267Z  suppressMessages(Folders(depth=1)) #> EDP List of 11 Objects #>                                       path object_type vault_name           user_name            last_modified #> 1                  /ClinVar/5.2.0-20210110      folder     Public        David Caplan 2022-11-10T19:47:11.142Z #> 2                  /ClinVar/5.2.0-20221105      folder     Public        David Caplan 2022-11-10T20:32:55.867Z #> 3                               /dir1/dir2      folder    user-51         Karl Forner 2023-03-02T14:02:17.736Z #> 4                        /GENCODE/3.0.0-42      folder     Public        David Caplan 2022-11-13T01:24:41.387Z #> 5                   /HGNC/3.3.1-2021-08-25      folder     Public        David Caplan 2022-11-02T23:45:22.368Z #> 6                      /MEDLINE/2.3.4-2018      folder     Public        David Caplan 2022-11-03T00:22:26.392Z #> 7                        /recursive/folder      folder    user-51         Karl Forner 2023-03-02T14:56:40.536Z #> 8   /Study ICF Templates/Agios AG348-C-011      folder        ICF           Dandan Xu 2023-02-03T00:52:06.228Z #> 9   /Study ICF Templates/Agios AG348-C-017      folder        ICF           Dandan Xu 2023-02-03T00:54:31.042Z #> 10 /Study ICF Templates/Exelixis XL184-315      folder        ICF           Dandan Xu 2023-02-03T00:59:07.815Z #> 11             /TCGA/2.0.0-2018-mc3-v0.2.8      folder     Public Tatjana Damnjanovic 2023-01-18T14:41:02.586Z   # get first four Folders(limit = 4) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 4 Objects #>                      path object_type      vault_name    user_name            last_modified #> 1                /ClinGen      folder Public Data Dev David Caplan 2023-02-15T20:07:39.539Z #> 2                /ClinVar      folder          Public David Caplan 2022-11-10T19:46:56.464Z #> 3 /ClinVar/5.2.0-20210110      folder          Public David Caplan 2022-11-10T19:47:11.142Z #> 4 /ClinVar/5.2.0-20221105      folder          Public David Caplan 2022-11-10T20:32:55.867Z  # create folder with description and tags v1 <- Vault_create('_an_upload',  description = 'upload', tags = list('fake', 'can_be_removed')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults... fdata <- Folder_create(v1, 'data') #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... fdata #> folder \"vsim-dev:_an_upload:/data\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:06.147Z  # CAUTION, no overwritting per default, folders are renamed incrementally # a new folder data-1 is created Folder_create(v1, 'data') #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> folder \"vsim-dev:_an_upload:/data-1\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:06.339Z  # create a hierarchy Folder_create(v1, 'source/code') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> folder \"vsim-dev:_an_upload:/source/code\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:06.838Z  # List folders of a given vault - recursive Folders(vault_id = v1) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 4 Objects #>           path object_type vault_name   user_name            last_modified #> 1        /data      folder _an_upload Karl Forner 2023-06-06T09:55:06.147Z #> 2      /data-1      folder _an_upload Karl Forner 2023-06-06T09:55:06.339Z #> 3      /source      folder _an_upload Karl Forner 2023-06-06T09:55:06.656Z #> 4 /source/code      folder _an_upload Karl Forner 2023-06-06T09:55:06.838Z  # List folders using regex on paths - recursive Folders(regex = '^/data') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 2 Objects #>      path object_type vault_name   user_name            last_modified #> 1   /data      folder _an_upload Karl Forner 2023-06-06T09:55:06.147Z #> 2 /data-1      folder _an_upload Karl Forner 2023-06-06T09:55:06.339Z Folders(regex = 'code$') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 2 Objects #>           path object_type vault_name    user_name            last_modified #> 1     /GENCODE      folder     Public David Caplan 2022-11-13T01:24:41.193Z #> 2 /source/code      folder _an_upload  Karl Forner 2023-06-06T09:55:06.838Z  # List folders matching paths - recursive Folders(query = 'code') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 1 Objects #>           path object_type vault_name   user_name            last_modified #> 1 /source/code      folder _an_upload Karl Forner 2023-06-06T09:55:06.838Z  # fetch a a folder from a given vault Folder(vault_id = v1, path = 'data') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> folder \"vsim-dev:_an_upload:/data\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:06.147Z  # fetch a folder with its full.path Folder(full_path = fdata$full_path) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> folder \"vsim-dev:_an_upload:/data\" (application/vnd.solvebio.folder) nb:0 user:Karl Forner accessed:2023-06-06T09:55:06.147Z delete(v1) #> DELETE https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults/2668... #> Vault \"vsim-dev:_an_upload\" (\"upload\", general, rwa), @ \"Karl Forner\", updated at:2023-06-06T09:55:08.315Z"},{"path":[]},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"upload-csv","dir":"Articles","previous_headings":"Upload and Download","what":"upload CSV","title":"Vaults, Files, Datasets and Objects","text":"","code":"irisp <- file.path(tempdir(), 'iris.csv') write.csv(iris[1:10,], irisp)  v <- Vault_create('_iris_upload',  description = 'upload',    tags = list('iris', 'can_be_removed')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults...  vpath <- 'data/iris/v1/iris_10.csv'  # File upload: folder hierarchy is created on the fly firis <- File_upload(v, irisp, vpath ) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> uploading file /tmp/RtmpeUkAj5/iris.csv... firis$full_path #> [1] \"vsim-dev:_iris_upload:/data/iris/v1/iris_10.csv\" firis$path #> [1] \"/data/iris/v1/iris_10.csv\" firis$md5 #> [1] \"14f700477f0105443bd294683f270a58\"  # File download res_down <- File_download(firis, file.path(dirname(irisp), 'iris_10_download.csv')) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835/download... dir(dirname(irisp), 'iris') #> [1] \"iris.csv\"             \"iris_10_download.csv\"  # fetch a File object File( full_path = firis$full_path) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> file \"vsim-dev:_iris_upload:/data/iris/v1/iris_10.csv\" (text/csv) nb:0 user:Karl Forner accessed:2023-06-06T09:55:11.032Z firis #> file \"vsim-dev:_iris_upload:/data/iris/v1/iris_10.csv\" (text/csv) nb:0 user:Karl Forner accessed:2023-06-06T09:55:09.713Z"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"upload-jsonl","dir":"Articles","previous_headings":"Upload and Download","what":"upload JSONL","title":"Vaults, Files, Datasets and Objects","text":"JSON Lines text format, also called newline-delimited JSON. JSON Lines convenient format storing structured data may processed one record time. * JSONL ndjson)","code":"# upload jsonl file irisj <- file.path(tempdir(), \"iris.json\")  # stream_out function write the JSONL format to a connection jsonlite:::stream_out(iris[1:15, ], file(irisj)) #> opening file output connection. #>  Complete! Processed total of 15 rows. #> closing file output connection.  vpath <- \"v1/iris_10.json\" fi2 <- File_upload(v, irisj, vpath) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> uploading file /tmp/RtmpeUkAj5/iris.json... fi2$path #> [1] \"/v1/iris_10.json\" fi2$mimetype #> [1] \"application/json\"  File_query(fi2) #> fetching the number of rows of the file... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147433357145394... #> found  lines #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147433357145394/data... #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           5.1         3.5          1.4         0.2  setosa #> 2           4.9         3.0          1.4         0.2  setosa #> 3           4.7         3.2          1.3         0.2  setosa #> 4           4.6         3.1          1.5         0.2  setosa #> 5           5.0         3.6          1.4         0.2  setosa #> 6           5.4         3.9          1.7         0.4  setosa #> 7           4.6         3.4          1.4         0.3  setosa #> 8           5.0         3.4          1.5         0.2  setosa #> 9           4.4         2.9          1.4         0.2  setosa #> 10          4.9         3.1          1.5         0.1  setosa #> 11          5.4         3.7          1.5         0.2  setosa #> 12          4.8         3.4          1.6         0.2  setosa #> 13          4.8         3.0          1.4         0.1  setosa #> 14          4.3         3.0          1.1         0.1  setosa #> 15          5.8         4.0          1.2         0.2  setosa File_query(fi2, filters = filters(\"Sepal.Length >= 5\")) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147433357145394/data... #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          5.0         3.6          1.4         0.2  setosa #> 3          5.4         3.9          1.7         0.4  setosa #> 4          5.0         3.4          1.5         0.2  setosa #> 5          5.4         3.7          1.5         0.2  setosa #> 6          5.8         4.0          1.2         0.2  setosa"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"files-listing","dir":"Articles","previous_headings":"","what":"Files Listing","title":"Vaults, Files, Datasets and Objects","text":"Works vaults folders using criteria filtering fetch_next, fetch_all functions.","code":"all_files <- as.data.frame(Files()) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects...  Files(limit = 3) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 3 Objects #>                                                                                                        path object_type      vault_name    user_name            last_modified #> 1                        /ClinGen/ClinGen-1-0-0-2015-06-02-Genes-1098056416333778650-20230215200640.json.gz        file Public Data Dev David Caplan 2023-02-15T20:07:46.945Z #> 2 /ClinVar/5.2.0-20210110/ClinVar-5-2-0-20210110-Variants-GRCH37-1425664822266145048-20221110194518.json.gz        file          Public David Caplan 2022-11-10T19:47:23.197Z #> 3 /ClinVar/5.2.0-20210110/ClinVar-5-2-0-20210110-Variants-GRCH38-1425664716292714398-20221110194523.json.gz        file          Public David Caplan 2022-11-10T19:47:23.188Z  Files(regex = 'TCG*') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 2 Objects #>                                                                              path object_type vault_name           user_name            last_modified #> 1 /TCGA/2.0.0-2018-mc3-v0.2.8/TCGA-mc3.v0.2.8.PUBLIC.LAML_PATCH.maf.oncokb.txt.gz        file     Public        David Caplan 2023-03-13T16:22:09.865Z #> 2                          /TCGA/2.0.0-2018-mc3-v0.2.8/TCGA_Patients_Diseases.txt        file     Public Tatjana Damnjanovic 2023-01-18T12:07:22.391Z  Files(regex = 'TCG*') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 2 Objects #>                                                                              path object_type vault_name           user_name            last_modified #> 1 /TCGA/2.0.0-2018-mc3-v0.2.8/TCGA-mc3.v0.2.8.PUBLIC.LAML_PATCH.maf.oncokb.txt.gz        file     Public        David Caplan 2023-03-13T16:22:09.865Z #> 2                          /TCGA/2.0.0-2018-mc3-v0.2.8/TCGA_Patients_Diseases.txt        file     Public Tatjana Damnjanovic 2023-01-18T12:07:22.391Z  # files from a given vault Files(vault_id = v) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 2 Objects #>                        path object_type   vault_name   user_name            last_modified #> 1 /data/iris/v1/iris_10.csv        file _iris_upload Karl Forner 2023-06-06T09:55:09.713Z #> 2          /v1/iris_10.json        file _iris_upload Karl Forner 2023-06-06T09:55:11.894Z  # files from a given folder dirs_df <- suppressMessages(as.data.frame(Folders())) dplyr::filter(dirs_df,  path == '/GENCODE/3.0.0-42') #>   account_id ancestor_object_ids availability class_name               created_at dataset_description dataset_documents_count documents_count dataset_full_name storage_class dataset_id depth #> 1          2 1911311459582295135         NULL     Object 2022-11-13T01:24:41.387Z                NULL                    NULL            NULL              NULL          NULL       NULL     1 #>   description filename                          full_path has_children has_folder_children                  id is_deleted is_transformable            last_accessed            last_modified  md5 #> 1        NULL 3.0.0-42 quartzbio:Public:/GENCODE/3.0.0-42         TRUE               FALSE 1911311461138976190      FALSE            FALSE 2022-11-13T01:24:41.387Z 2022-11-13T01:24:41.387Z NULL #>   metadata                        mimetype num_children num_descendants object_type    parent_object_id              path size tags               updated_at upload_url  url #> 1     NULL application/vnd.solvebio.folder            4               4      folder 1911311459582295135 /GENCODE/3.0.0-42 NULL NULL 2023-05-23T12:41:09.998Z       NULL NULL #>                                                                                               user user_id vault_id vault_name version_count global_beacon #> 1 User, david.caplan@precisionformedicine.com, David, David Caplan, 2, TRUE, TRUE, primary_owner,        2       19     Public             0          NULL fo <- Folder(full_path = 'quartzbio:Public:/GENCODE/3.0.0-42') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... fo #> folder \"quartzbio:Public:/GENCODE/3.0.0-42\" (application/vnd.solvebio.folder) nb:0 user:David Caplan accessed:2022-11-13T01:24:41.387Z Files(ancestor_id = fo$id) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> EDP List of 2 Objects #>                                                    path object_type vault_name    user_name            last_modified #> 1       /GENCODE/3.0.0-42/gencode.v42.annotation.gtf.gz        file     Public David Caplan 2022-11-13T02:21:57.723Z #> 2 /GENCODE/3.0.0-42/gencode.v42lift37.annotation.gtf.gz        file     Public David Caplan 2022-11-13T02:23:12.714Z"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"files-move","dir":"Articles","previous_headings":"","what":"Files Move","title":"Vaults, Files, Datasets and Objects","text":"","code":"# move file from v1/ to v2/ f1 <- Folder_create(vault_id=v, '/data/iris/v2') #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... firis_v2 <- Object_update(firis, parent_object_id = f1$id) #> PUT https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835... firis_v2 #> file \"vsim-dev:_iris_upload:/data/iris/v2/iris_10.csv\" (text/csv) nb:10 user:Karl Forner accessed:2023-06-06T09:55:11.032Z"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"files-querying","dir":"Articles","previous_headings":"","what":"Files Querying","title":"Vaults, Files, Datasets and Objects","text":"Columns, Rows objects tabular can obtained","code":"# fetch the two first rows f2r <- File_query(firis_v2, limit=2) #> fetching the number of rows of the file... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835... #> found 10 lines #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835/data...  # fetch the two next ones fetch_next(f2r) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835/data... #>     Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1 3          4.7         3.2          1.3         0.2  setosa #> 2 4          4.6         3.1          1.5         0.2  setosa  # fetch row 8 File_query(firis_v2, limit=1,  offset=7) #> fetching the number of rows of the file... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835... #> found 10 lines #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835/data... #>     Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1 8            5         3.4          1.5         0.2  setosa iris[8,] #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 8            5         3.4          1.5         0.2  setosa  # fetch all Setosa  File_query(firis_v2, filters= filters('Species contains \"setosa\"')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835/data... #>       Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1   1          5.1         3.5          1.4         0.2  setosa #> 2   2          4.9           3          1.4         0.2  setosa #> 3   3          4.7         3.2          1.3         0.2  setosa #> 4   4          4.6         3.1          1.5         0.2  setosa #> 5   5            5         3.6          1.4         0.2  setosa #> 6   6          5.4         3.9          1.7         0.4  setosa #> 7   7          4.6         3.4          1.4         0.3  setosa #> 8   8            5         3.4          1.5         0.2  setosa #> 9   9          4.4         2.9          1.4         0.2  setosa #> 10 10          4.9         3.1          1.5         0.1  setosa File_query(firis_v2, filters= filters('Sepal.Length = 4.7')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects/2060147415064509835/data... #> data frame with 0 columns and 0 rows"},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"create-and-import-from-a-data-frame","dir":"Articles","previous_headings":"","what":"Create and Import from a data.frame","title":"Vaults, Files, Datasets and Objects","text":"","code":"iris_2 <- Dataset_create(v, 'iris_2.ds') #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... iris_2$full_path #> [1] \"vsim-dev:_iris_upload:/iris_2.ds\" iris_2$object_type #> [1] \"dataset\"  import_res <- Dataset_import(iris_2, df = iris[1:12, ], sync = TRUE) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/dataset_imports... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060147492615808236... #> waiting for task 2060147492615808236 (\"Dataset Import\" for \"vsim-dev:_iris_upload:/iris_2.ds\"),  29 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060147492615808236... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060147504343542628... #> waiting for task 2060147504343542628 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/iris_2.ds\"),  28 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060147504343542628... #> waiting for task 2060147504343542628 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/iris_2.ds\"),  27 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060147504343542628... #> waiting for task 2060147504343542628 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/iris_2.ds\"),  26 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060147504343542628... #> waiting for task 2060147504343542628 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/iris_2.ds\"),  25 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060147504343542628... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks... iris_2 <- Dataset(vault_id = v, path = iris_2$path) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... i2 <- Dataset_query(iris_2, limit = 1) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/fields... #> took 0.161000000000001 to process the meta data. fetch_next(i2) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          4.9           3          1.4         0.2  setosa"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"create-and-import-from-an-edp-file-object","dir":"Articles","previous_headings":"","what":"Create and Import from an EDP File object","title":"Vaults, Files, Datasets and Objects","text":"","code":"# prepare the file to upload   MTCARS <- mtcars[1:4, 1:5 ]    # write it in a local file   local_path <- file.path(tempdir(), \"mtcars.csv\")   write.csv(MTCARS, local_path, row.names = FALSE)    # upload it   fi <- suppressMessages(File_upload(v, local_path, \"/a/b/c/mtcars.csv\"))      # create the dataset (empty)   ds <- Dataset_create(v, \"mtcars.ds\") #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects...   # import the EDP File to the Dataset   suppressMessages(imp <- Dataset_import(ds, file_id = fi, sync =TRUE)) #> Warning in Dataset_import(ds, file_id = fi, sync = TRUE): got timeout while waiting for dataset import task completion: 2060147658965121373    # with meta set to FALSE some reordering may appear in columns   df <- Dataset_query(ds, meta = FALSE, limit = 5000) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147655134713188/data...   df[1:3, ] #>   disp  mpg  hp drat cyl #> 1  160 21.0 110 3.90   6 #> 2  160 21.0 110 3.90   6 #> 3  108 22.8  93 3.85   4    df_with_meta <-  Dataset_query(ds, meta = TRUE) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147655134713188/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147655134713188/fields... #> took 0.167000000000002 to process the meta data.   df_with_meta[1:3, ] #>    mpg cyl disp  hp drat #> 1 21.0   6  160 110 3.90 #> 2 21.0   6  160 110 3.90 #> 3 22.8   4  108  93 3.85"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"create-and-import-from-a-record-lists","dir":"Articles","previous_headings":"","what":"Create and Import from a record lists","title":"Vaults, Files, Datasets and Objects","text":"","code":"genes_1 <- Dataset_create(v, 'genes.ds',    description = \"genes hits\",   metadata = list(DEV = TRUE),    tags = list(\"QBP\", \"EDP\"),    storage_class = \"Temporary\", capacity = \"small\") #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects...  records <- list(   list(gene = \"CFTR\", importance = 1, sample_count = 2104),   list(gene = \"BRCA2\", importance = 1, sample_count = 1391),   list(gene = \"CLIC2\", importance = 5, sample_count = 14) )  import_res <- Dataset_import(genes_1, records = records, sync = TRUE) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/dataset_imports... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148482955668768... #> waiting for task 2060148482955668768 (\"Dataset Import\" for \"vsim-dev:_iris_upload:/genes.ds\"),  29 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148482955668768... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148492685464999... #> waiting for task 2060148492685464999 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/genes.ds\"),  28 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148492685464999... #> waiting for task 2060148492685464999 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/genes.ds\"),  27 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148492685464999... #> waiting for task 2060148492685464999 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/genes.ds\"),  26 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148492685464999... #> waiting for task 2060148492685464999 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/genes.ds\"),  25 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148492685464999... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks... g1 <- Dataset_query(genes_1, limit = 1) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060148478010548922/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060148478010548922/fields... #> took 0.162000000000006 to process the meta data. g1 #>   importance gene sample_count #> 1          1 CFTR         2104 fetch_all(g1) #>   importance  gene sample_count #> 1          1  CFTR         2104 #> 2          1 BRCA2         1391 #> 3          5 CLIC2           14 Dataset_query(genes_1, filters = filters('sample_count <= 14')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060148478010548922/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060148478010548922/fields... #> took 0.157999999999987 to process the meta data. #>   importance  gene sample_count #> 1          5 CLIC2           14"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"modify-records-with-python-expression","dir":"Articles","previous_headings":"Create and Import from a record lists","what":"Modify records with python expression","title":"Vaults, Files, Datasets and Objects","text":"","code":"nobs <- Dataset_create(v, 'dna_gurus.ds') #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... authors <- list(     list(name='Francis Crick'),     list(name='James Watson'),     list(name='Rosalind Franklin') ) # additional firt and last name fields to be created target_fields <- list(   list(     name=\"first_name\",     description=\"Adds a first name column based on name column\",     data_type=\"string\",     expression=\"record.name.split(' ')[0]\"   ),   list(     name=\"last_name\",     description=\"Adds a last name column based on name column\",     data_type=\"string\",     expression=\"record.name.split(' ')[-1]\"   ) ) res <- Dataset_import(nobs, records = authors,    target_fields = target_fields,    sync = TRUE) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/dataset_imports... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148639020092336... #> waiting for task 2060148639020092336 (\"Dataset Import\" for \"vsim-dev:_iris_upload:/dna_gurus.ds\"),  29 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148639020092336... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148649900332273... #> waiting for task 2060148649900332273 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/dna_gurus.ds\"),  28 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148649900332273... #> waiting for task 2060148649900332273 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/dna_gurus.ds\"),  27 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148649900332273... #> waiting for task 2060148649900332273 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/dna_gurus.ds\"),  26 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148649900332273... #> waiting for task 2060148649900332273 (\"Dataset Commit\" for \"vsim-dev:_iris_upload:/dna_gurus.ds\"),  25 retries left #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks/2060148649900332273... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/tasks... Dataset_query(nobs) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060148634457461929/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060148634457461929/fields... #> took 0.248999999999995 to process the meta data. #>   first_name last_name              name #> 1    Francis     Crick     Francis Crick #> 2      James    Watson      James Watson #> 3   Rosalind  Franklin Rosalind Franklin"},{"path":"https://quartzbio.github.io/quartzbio.edp/articles/vaults_and_objects.html","id":"dataset-query","dir":"Articles","previous_headings":"","what":"Dataset Query","title":"Vaults, Files, Datasets and Objects","text":"","code":"# fetch the first row f1r_ds <- Dataset_query(iris_2, limit=1) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/fields... #> took 0.183999999999997 to process the meta data.  fetch_next(f1r_ds) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          4.9           3          1.4         0.2  setosa  fetch_all(f1r_ds) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           5.1         3.5          1.4         0.2  setosa #> 2           4.9         3.0          1.4         0.2  setosa #> 3           4.7         3.2          1.3         0.2  setosa #> 4           4.6         3.1          1.5         0.2  setosa #> 5           5.0         3.6          1.4         0.2  setosa #> 6           5.4         3.9          1.7         0.4  setosa #> 7           4.6         3.4          1.4         0.3  setosa #> 8           5.0         3.4          1.5         0.2  setosa #> 9           4.4         2.9          1.4         0.2  setosa #> 10          4.9         3.1          1.5         0.1  setosa #> 11          5.4         3.7          1.5         0.2  setosa #> 12          4.8         3.4          1.6         0.2  setosa  # Filters acts on column fields that matches the data.frame import. Dataset_query(iris_2, filters= filters('Species contains \"setosa\"')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/fields... #> took 0.169000000000011 to process the meta data. #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           5.1         3.5          1.4         0.2  setosa #> 2           4.9         3.0          1.4         0.2  setosa #> 3           4.7         3.2          1.3         0.2  setosa #> 4           4.6         3.1          1.5         0.2  setosa #> 5           5.0         3.6          1.4         0.2  setosa #> 6           5.4         3.9          1.7         0.4  setosa #> 7           4.6         3.4          1.4         0.3  setosa #> 8           5.0         3.4          1.5         0.2  setosa #> 9           4.4         2.9          1.4         0.2  setosa #> 10          4.9         3.1          1.5         0.1  setosa #> 11          5.4         3.7          1.5         0.2  setosa #> 12          4.8         3.4          1.6         0.2  setosa  Dataset_query(iris_2, filters= filters('Sepal.Length >= 5.1')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/fields... #> took 0.171000000000021 to process the meta data. #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          5.4         3.9          1.7         0.4  setosa #> 3          5.4         3.7          1.5         0.2  setosa  Dataset_query(iris_2, filters= filters('(Sepal.Length >= 5.1) OR  (Sepal.Width <= 3.0)')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/fields... #> took 0.163000000000011 to process the meta data. #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          5.4         3.9          1.7         0.4  setosa #> 4          4.4         2.9          1.4         0.2  setosa #> 5          5.4         3.7          1.5         0.2  setosa  # Keep fields Dataset_query(iris_2,    fields = c('Petal.Width', 'Species'),   filters= filters('(Sepal.Length >= 5.1) OR  (Sepal.Width <= 3.0)')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/fields... #> took 0.168999999999983 to process the meta data. #>   Petal.Width Species #> 1         0.2  setosa #> 2         0.2  setosa #> 3         0.4  setosa #> 4         0.2  setosa #> 5         0.2  setosa  # Exclude fields Dataset_query(iris_2,    exclude_fields = c('Petal.Width', 'Species'),   filters= filters('(Sepal.Length >= 5.1) OR  (Sepal.Width <= 3.0)')) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/2060147488315883162/fields... #> took 0.222000000000008 to process the meta data. #>   Sepal.Length Sepal.Width Petal.Length             _commit                  _id #> 1          5.1         3.5          1.4 2060147502872920434 AYiQIeU-RgPV1mL7vTiW #> 2          4.9         3.0          1.4 2060147502872920434 AYiQIeU-RgPV1mL7vTiX #> 3          5.4         3.9          1.7 2060147502872920434 AYiQIeU-RgPV1mL7vTib #> 4          4.4         2.9          1.4 2060147502872920434 AYiQIeU-RgPV1mL7vTie #> 5          5.4         3.7          1.5 2060147502872920434 AYiQIeU-RgPV1mL7vTig  # orginal data order ds <- Dataset(full_path =  \"quartzbio:Public:/TCGA/2.0.0-2018-mc3-v0.2.8/PatientsDiseases\") #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/objects... df <- Dataset_query(ds, limit=2000, meta = TRUE) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... #> took 0.161000000000001 to process the meta data. head(df) #>   PATIENT_BARCODE  SAMPLE_BARCODE DISEASE        SUBTYPE #> 1    TCGA-OR-A5J1 TCGA-OR-A5J1-01     ACC Not_Applicable #> 2    TCGA-OR-A5J2 TCGA-OR-A5J2-01     ACC Not_Applicable #> 3    TCGA-OR-A5J3 TCGA-OR-A5J3-01     ACC Not_Applicable #> 4    TCGA-OR-A5J5 TCGA-OR-A5J5-01     ACC Not_Applicable #> 5    TCGA-OR-A5J6 TCGA-OR-A5J6-01     ACC Not_Applicable #> 6    TCGA-OR-A5J7 TCGA-OR-A5J7-01     ACC Not_Applicable  # sort by Fields fields <- DatasetFields(ds) #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... dfo <- Dataset_query(ds, ordering = c('patient_barcode', 'sample_barcode'), limit=2000, meta = TRUE) #> POST https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/data... #> GET https://vsim-dev.api.edp.aws.quartz.bio/v2/datasets/1959470796697098463/fields... #> took 0.164000000000016 to process the meta data. head(dfo) #>   PATIENT_BARCODE  SAMPLE_BARCODE DISEASE          SUBTYPE #> 1    TCGA-02-0047 TCGA-02-0047-01     GBM            IDHwt #> 2    TCGA-02-0055 TCGA-02-0055-01     GBM            IDHwt #> 3    TCGA-02-2483 TCGA-02-2483-01     GBM IDHmut-non-codel #> 4    TCGA-02-2485 TCGA-02-2485-01     GBM            IDHwt #> 5    TCGA-02-2486 TCGA-02-2486-01     GBM            IDHwt #> 6    TCGA-04-1348 TCGA-04-1348-01      OV   Not_Applicable   delete(v) #> DELETE https://vsim-dev.api.edp.aws.quartz.bio/v2/vaults/2669... #> Vault \"vsim-dev:_iris_upload\" (\"upload\", general, rwa), @ \"Karl Forner\", updated at:2023-06-06T09:57:58.526Z"},{"path":"https://quartzbio.github.io/quartzbio.edp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Caplan. Author. Karl Forner. Author, maintainer. Marc Lamarine. Contributor.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caplan D, Forner K (2023). quartzbio.edp: Official QuartzBio EDP API Client. R package version 0.99.1.","code":"@Manual{,   title = {quartzbio.edp: The Official QuartzBio EDP API Client},   author = {David Caplan and Karl Forner},   year = {2023},   note = {R package version 0.99.1}, }"},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"quartzbio-edp-for-r","dir":"","previous_headings":"","what":"The Official QuartzBio EDP API Client","title":"The Official QuartzBio EDP API Client","text":"package contains QuartzBio EDP R language bindings EDP (Enterprise Data Platform) API. Features: Authentication Parallelization dataset queries Progress report S3 methods Portability platforms: Linux, Windows, OS X. Please see legacy SolveBio documentation information platform.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"beta-release","dir":"","previous_headings":"","what":"Beta Release","title":"The Official QuartzBio EDP API Client","text":"-going migration legacy solvebio R API new quartzbio.edp package. backwards compatibility currently maintained providing legacy SolveBio R client new client. See ChangeLog updates","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Official QuartzBio EDP API Client","text":"Installing package requires installed R environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"installation-from-github","dir":"","previous_headings":"Installation","what":"installation from GitHub","title":"The Official QuartzBio EDP API Client","text":"","code":"remotes::install_github(\"quartzbio/quartzbio.edp\", dependencies = TRUE)"},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"rcppsimdjson-and-cxx17","dir":"","previous_headings":"Installation","what":"RcppSimdJson and CXX17","title":"The Official QuartzBio EDP API Client","text":"quartzbio.edp uses RcppSimdJson R package speed. older systems, RcppSimdJson requires CXX17 compatible C++ compiler, even installed pre-compiled binary package.. case, can manually install CXX17 compiler. resources: - https://www.geeksforgeeks.org/complete-guide--install-c17--windows/ - https://gasparri.org/2020/07/30/installing-c17--c20--ubuntu--amazon-linux/ case, RcppSimdJson optional. installed, quartzbio.edp work seamlessly degraded mode.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"complete-reproducible-installation-example-using-a-tidyverse-qbrocker-image","dir":"","previous_headings":"Installation","what":"complete reproducible installation example using a tidyverse qbrocker image","title":"The Official QuartzBio EDP API Client","text":"","code":"# run a shell inside the tidyverse container docker run -ti --rm rocker/tidyverse  bash  # use the pre-installed installGithub.r script installGithub.r -d TRUE quartzbio/quartzbio.edp  ### OR: run R and use the `install_github()` function R >remotes::install_github(\"quartzbio/quartzbio.edp\", dependencies = TRUE)"},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"documentation","dir":"","previous_headings":"","what":"documentation","title":"The Official QuartzBio EDP API Client","text":"Github public quartzbio.edp source repository Github quartzbio.edp online package documentation","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"connectionauthentication","dir":"","previous_headings":"Usage","what":"connection/authentication","title":"The Official QuartzBio EDP API Client","text":"See Connection EDP host vignette details. Get Authentication Token. can obtained Personal Access Tokens Save ~/.qb/edp.json file default EDP configuration profile. ~/.qb/edp.json may look like: package functions use default profile default use explicit configuration. example:","code":"{   \"default\": {     \"secret\": \"PUT_HERE_TOUR_AUTHENTICATION_TOKEN\",     \"host\": \"https://api.solvebio.com\"   } } library(quartzbio.edp) User() Vaults() Folders()"},{"path":"https://quartzbio.github.io/quartzbio.edp/index.html","id":"articles","dir":"","previous_headings":"","what":"Articles","title":"The Official QuartzBio EDP API Client","text":"Vignettes","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Annotator.annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a data table/frame with additional fields. — Annotator.annotate","title":"Annotate a data table/frame with additional fields. — Annotator.annotate","text":"Annotate data table/frame additional fields.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Annotator.annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a data table/frame with additional fields. — Annotator.annotate","text":"","code":"Annotator.annotate(   records,   fields,   include_errors = FALSE,   raw = FALSE,   env = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Annotator.annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a data table/frame with additional fields. — Annotator.annotate","text":"records data annotate data frame. fields fields add. include_errors whether include errors output. raw whether return raw response. env Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the metadata about all application on QuartzBio EDP available to the current user. — Application.all","title":"Retrieve the metadata about all application on QuartzBio EDP available to the current user. — Application.all","text":"Retrieve metadata application QuartzBio EDP available current user.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the metadata about all application on QuartzBio EDP available to the current user. — Application.all","text":"","code":"Application.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the metadata about all application on QuartzBio EDP available to the current user. — Application.all","text":"env Custom client environment. ... Additional query parameters, passed .request().","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the metadata about all application on QuartzBio EDP available to the current user. — Application.all","text":"","code":"if (FALSE)  Application.all()"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.create.html","id":null,"dir":"Reference","previous_headings":"","what":"Application.create — Application.create","title":"Application.create — Application.create","text":"Create new QuartzBio EDP application.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Application.create — Application.create","text":"","code":"Application.create(name, redirect_uris, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Application.create — Application.create","text":"name name application. redirect_uris list space-separated OAuth2 redirect URIs. env (optional) Custom client environment. ... (optional) Additional application attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Application.create — Application.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Application.create — Application.create","text":"","code":"if (FALSE) { Application.create(                    name=\"My new application\",                    redirect_uris=\"http://localhost:3838/\"                    ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Application.delete — Application.delete","title":"Application.delete — Application.delete","text":"Delete specific application QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Application.delete — Application.delete","text":"","code":"Application.delete(client_id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Application.delete — Application.delete","text":"client_id client ID application. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Application.delete — Application.delete","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Application.delete — Application.delete","text":"","code":"if (FALSE) { Application.delete(\"abcd1234\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the metadata about a specific application QuartzBio EDP. — Application.retrieve","title":"Retrieve the metadata about a specific application QuartzBio EDP. — Application.retrieve","text":"Retrieve metadata specific application QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the metadata about a specific application QuartzBio EDP. — Application.retrieve","text":"","code":"Application.retrieve(client_id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the metadata about a specific application QuartzBio EDP. — Application.retrieve","text":"client_id client ID application. env Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the metadata about a specific application QuartzBio EDP. — Application.retrieve","text":"","code":"if (FALSE)   Application.retrieve(\"abcd1234\")"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.update.html","id":null,"dir":"Reference","previous_headings":"","what":"Application.update — Application.update","title":"Application.update — Application.update","text":"Updates attributes existing application.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Application.update — Application.update","text":"","code":"Application.update(client_id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Application.update — Application.update","text":"client_id client ID application. env (optional) Custom client environment. ... Application attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Application.update — Application.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Application.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Application.update — Application.update","text":"","code":"if (FALSE) { Application.update(                    \"abcd1234\",                    name=\"New app name\"                    ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Beacon.all — Beacon.all","title":"Beacon.all — Beacon.all","text":"Retrieves metadata beacons QuartzBio EDP accessible current user.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beacon.all — Beacon.all","text":"","code":"Beacon.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beacon.all — Beacon.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beacon.all — Beacon.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beacon.all — Beacon.all","text":"","code":"if (FALSE) { Beacon.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.create.html","id":null,"dir":"Reference","previous_headings":"","what":"Beacon.create — Beacon.create","title":"Beacon.create — Beacon.create","text":"Add new beacon existing beacon set. beacon set must already exist order add beacons.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beacon.create — Beacon.create","text":"","code":"Beacon.create(   beacon_set_id,   vault_object_id,   title,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beacon.create — Beacon.create","text":"beacon_set_id ID parent beacon set. vault_object_id ID vault object (.e. dataset) queried beacon. title title displayed beacon. env (optional) Custom client environment. ... (optional) Additional beacon attributes (description params).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beacon.create — Beacon.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beacon.create — Beacon.create","text":"","code":"if (FALSE) { Beacon.create(               beacon_set_id=\"1234\",               vault_object_id=\"1234567890\",               title=\"My new beacon\"               ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Beacon.delete — Beacon.delete","title":"Beacon.delete — Beacon.delete","text":"Delete specific beacon QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beacon.delete — Beacon.delete","text":"","code":"Beacon.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beacon.delete — Beacon.delete","text":"id ID beacon. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beacon.delete — Beacon.delete","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beacon.delete — Beacon.delete","text":"","code":"if (FALSE) { Beacon.delete(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.query.html","id":null,"dir":"Reference","previous_headings":"","what":"Beacon.query — Beacon.query","title":"Beacon.query — Beacon.query","text":"Query individual beacon.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beacon.query — Beacon.query","text":"","code":"Beacon.query(id, query, entity_type, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beacon.query — Beacon.query","text":"id ID beacon. query entity ID query string. entity_type (optional) valid QuartzBio EDP entity type. env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.query.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beacon.query — Beacon.query","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beacon.query — Beacon.query","text":"","code":"if (FALSE) { Beacon.query(              id=\"1234\",              query=\"BRCA2\",              entity_type=\"gene\"              ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Beacon.retrieve — Beacon.retrieve","title":"Beacon.retrieve — Beacon.retrieve","text":"Retrieves metadata specific beacon QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beacon.retrieve — Beacon.retrieve","text":"","code":"Beacon.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beacon.retrieve — Beacon.retrieve","text":"id ID beacon. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beacon.retrieve — Beacon.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beacon.retrieve — Beacon.retrieve","text":"","code":"if (FALSE) { Beacon.retrieve(\"1234\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.update.html","id":null,"dir":"Reference","previous_headings":"","what":"Beacon.update — Beacon.update","title":"Beacon.update — Beacon.update","text":"Updates attributes existing beacon.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beacon.update — Beacon.update","text":"","code":"Beacon.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beacon.update — Beacon.update","text":"id ID beacon update. env (optional) Custom client environment. ... Beacon attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beacon.update — Beacon.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Beacon.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beacon.update — Beacon.update","text":"","code":"if (FALSE) { Beacon.update(               id=\"1234\",               title=\"New Beacon Title\"              ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.all.html","id":null,"dir":"Reference","previous_headings":"","what":"BeaconSet.all — BeaconSet.all","title":"BeaconSet.all — BeaconSet.all","text":"Retrieves metadata beacon sets QuartzBio EDP accessible current user.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BeaconSet.all — BeaconSet.all","text":"","code":"BeaconSet.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BeaconSet.all — BeaconSet.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BeaconSet.all — BeaconSet.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BeaconSet.all — BeaconSet.all","text":"","code":"if (FALSE) { BeaconSet.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.create.html","id":null,"dir":"Reference","previous_headings":"","what":"BeaconSet.create — BeaconSet.create","title":"BeaconSet.create — BeaconSet.create","text":"Create new beacon set.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BeaconSet.create — BeaconSet.create","text":"","code":"BeaconSet.create(   title,   description,   is_shared = FALSE,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BeaconSet.create — BeaconSet.create","text":"title title displayed beacon set. description (optional) optional description new beacon set. is_shared TRUE, everyone else account able see query beacon set, able edit . (Default: FALSE) env (optional) Custom client environment. ... (optional) Additional beacon set attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BeaconSet.create — BeaconSet.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BeaconSet.create — BeaconSet.create","text":"","code":"if (FALSE) { BeaconSet.create(                  title=\"My new beacon set\",                  ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"BeaconSet.delete — BeaconSet.delete","title":"BeaconSet.delete — BeaconSet.delete","text":"Delete specific beacon set (including beacons) QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BeaconSet.delete — BeaconSet.delete","text":"","code":"BeaconSet.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BeaconSet.delete — BeaconSet.delete","text":"id ID beacon set. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BeaconSet.delete — BeaconSet.delete","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BeaconSet.delete — BeaconSet.delete","text":"","code":"if (FALSE) { BeaconSet.delete(\"1234\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.query.html","id":null,"dir":"Reference","previous_headings":"","what":"BeaconSet.query — BeaconSet.query","title":"BeaconSet.query — BeaconSet.query","text":"Query beacon set (.e. beacons within beacon set).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BeaconSet.query — BeaconSet.query","text":"","code":"BeaconSet.query(id, query, entity_type, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BeaconSet.query — BeaconSet.query","text":"id ID beacon set. query entity ID query string. entity_type (optional) valid QuartzBio EDP entity type. env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.query.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BeaconSet.query — BeaconSet.query","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BeaconSet.query — BeaconSet.query","text":"","code":"if (FALSE) { BeaconSet.query(                 id=\"1234\",                 query=\"BRCA2\",                 entity_type=\"gene\"                 ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"BeaconSet.retrieve — BeaconSet.retrieve","title":"BeaconSet.retrieve — BeaconSet.retrieve","text":"Retrieves metadata specific beacon set QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BeaconSet.retrieve — BeaconSet.retrieve","text":"","code":"BeaconSet.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BeaconSet.retrieve — BeaconSet.retrieve","text":"id ID beacon set. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BeaconSet.retrieve — BeaconSet.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BeaconSet.retrieve — BeaconSet.retrieve","text":"","code":"if (FALSE) { BeaconSet.retrieve(\"1234\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.update.html","id":null,"dir":"Reference","previous_headings":"","what":"BeaconSet.update — BeaconSet.update","title":"BeaconSet.update — BeaconSet.update","text":"Updates attributes existing beacon set.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BeaconSet.update — BeaconSet.update","text":"","code":"BeaconSet.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BeaconSet.update — BeaconSet.update","text":"id ID beacon set update. env (optional) Custom client environment. ... Beacon set attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BeaconSet.update — BeaconSet.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/BeaconSet.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BeaconSet.update — BeaconSet.update","text":"","code":"if (FALSE) { BeaconSet.update(                  id=\"1234\",                  title=\"New Beacon Set Title\"                 ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.activity — Dataset.activity","title":"Dataset.activity — Dataset.activity","text":"helper function get follow current activity dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.activity — Dataset.activity","text":"","code":"Dataset.activity(id, follow = TRUE, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.activity — Dataset.activity","text":"id String ID QuartzBio EDP dataset follow Follow active tasks complete. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.activity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.activity — Dataset.activity","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.activity — Dataset.activity","text":"","code":"if (FALSE) { Dataset.activity(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the metadata about datasets on QuartzBio EDP. — Dataset.all","title":"Retrieves the metadata about datasets on QuartzBio EDP. — Dataset.all","text":"Retrieves metadata datasets QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the metadata about datasets on QuartzBio EDP. — Dataset.all","text":"","code":"Dataset.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the metadata about datasets on QuartzBio EDP. — Dataset.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieves the metadata about datasets on QuartzBio EDP. — Dataset.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the metadata about datasets on QuartzBio EDP. — Dataset.all","text":"","code":"if (FALSE) { Dataset.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.count.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.count — Dataset.count","title":"Dataset.count — Dataset.count","text":"Returns total number records given QuartzBio EDP dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.count — Dataset.count","text":"","code":"Dataset.count(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.count — Dataset.count","text":"id ID QuartzBio EDP dataset, Dataset object. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.count.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.count — Dataset.count","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.count — Dataset.count","text":"","code":"if (FALSE) { dataset <- Dataset.get_by_full_path(\"solvebio:public:/ClinVar/3.7.4-2017-01-30/Variants-GRCh37\") Dataset.count(dataset) Dataset.count(dataset, filters='[[\"gene_symbol\", \"BRCA2\"]]') }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.create.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.create — Dataset.create","title":"Dataset.create — Dataset.create","text":"Create empty QuartzBio EDP dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.create — Dataset.create","text":"","code":"Dataset.create(   vault_id,   vault_parent_object_id,   name,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.create — Dataset.create","text":"vault_id ID vault. vault_parent_object_id parent object (folder) ID vault. name name dataset parent folder. env (optional) Custom client environment. ... (optional) Additional dataset attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.create — Dataset.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.create — Dataset.create","text":"","code":"if (FALSE) { Dataset.create(vault_id=vault$id, vault_parent_object_id=NULL, name=\"My Dataset\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.data — Dataset.data","title":"Dataset.data — Dataset.data","text":"Returns one page documents QuartzBio EDP dataset processes response.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.data — Dataset.data","text":"","code":"Dataset.data(id, filters, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.data — Dataset.data","text":"id ID QuartzBio EDP dataset, Dataset object. filters (optional) Query filters. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.data — Dataset.data","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.data — Dataset.data","text":"","code":"if (FALSE) { Dataset.data(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.delete — Dataset.delete","title":"Dataset.delete — Dataset.delete","text":"Delete specific dataset QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.delete — Dataset.delete","text":"","code":"Dataset.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.delete — Dataset.delete","text":"id String ID QuartzBio EDP dataset env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.delete — Dataset.delete","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.delete — Dataset.delete","text":"","code":"if (FALSE) { Dataset.delete(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.disable_global_beacon.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.disable_global_beacon — Dataset.disable_global_beacon","title":"Dataset.disable_global_beacon — Dataset.disable_global_beacon","text":"Disables Global Beacon dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.disable_global_beacon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.disable_global_beacon — Dataset.disable_global_beacon","text":"","code":"Dataset.disable_global_beacon(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.disable_global_beacon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.disable_global_beacon — Dataset.disable_global_beacon","text":"id ID QuartzBio EDP dataset. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.disable_global_beacon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.disable_global_beacon — Dataset.disable_global_beacon","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.disable_global_beacon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.disable_global_beacon — Dataset.disable_global_beacon","text":"","code":"if (FALSE) { Dataset.disable_global_beacon(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.enable_global_beacon.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.enable_global_beacon — Dataset.enable_global_beacon","title":"Dataset.enable_global_beacon — Dataset.enable_global_beacon","text":"Enables Global Beacon dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.enable_global_beacon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.enable_global_beacon — Dataset.enable_global_beacon","text":"","code":"Dataset.enable_global_beacon(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.enable_global_beacon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.enable_global_beacon — Dataset.enable_global_beacon","text":"id ID QuartzBio EDP dataset. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.enable_global_beacon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.enable_global_beacon — Dataset.enable_global_beacon","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.enable_global_beacon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.enable_global_beacon — Dataset.enable_global_beacon","text":"","code":"if (FALSE) { Dataset.enable_global_beacon(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.facets.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.facets — Dataset.facets","title":"Dataset.facets — Dataset.facets","text":"Retrieves aggregated statistics term counts one fields QuartzBio EDP dataset. Returns list data frames, one requested facet.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.facets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.facets — Dataset.facets","text":"","code":"Dataset.facets(id, facets, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.facets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.facets — Dataset.facets","text":"id ID QuartzBio EDP dataset, Dataset object. facets list one field facets. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.facets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.facets — Dataset.facets","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.facets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.facets — Dataset.facets","text":"","code":"if (FALSE) { Dataset.facets(\"1234567890\", list(\"clinical_significance\", \"gene_symbol\")) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.fields — Dataset.fields","title":"Dataset.fields — Dataset.fields","text":"Retrieves list fields field metadata dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.fields — Dataset.fields","text":"","code":"Dataset.fields(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.fields — Dataset.fields","text":"id ID QuartzBio EDP dataset, Dataset object. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.fields.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.fields — Dataset.fields","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.fields — Dataset.fields","text":"","code":"if (FALSE) { Dataset.fields(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_by_full_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.get_by_full_path — Dataset.get_by_full_path","title":"Dataset.get_by_full_path — Dataset.get_by_full_path","text":"helper function get dataset full path.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_by_full_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.get_by_full_path — Dataset.get_by_full_path","text":"","code":"Dataset.get_by_full_path(full_path, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_by_full_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.get_by_full_path — Dataset.get_by_full_path","text":"full_path valid full path dataset. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_by_full_path.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.get_by_full_path — Dataset.get_by_full_path","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_by_full_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.get_by_full_path — Dataset.get_by_full_path","text":"","code":"if (FALSE) { Dataset.get_by_full_path(\"solvebio:public:/ClinVar/3.7.4-2017-01-30/Variants-GRCh37\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_global_beacon_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.get_global_beacon_status — Dataset.get_global_beacon_status","title":"Dataset.get_global_beacon_status — Dataset.get_global_beacon_status","text":"Retrieves global beacon status dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_global_beacon_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.get_global_beacon_status — Dataset.get_global_beacon_status","text":"","code":"Dataset.get_global_beacon_status(   id,   raise_on_disabled = FALSE,   env = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_global_beacon_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.get_global_beacon_status — Dataset.get_global_beacon_status","text":"id ID QuartzBio EDP dataset. raise_on_disabled Whether raise exception Global Beacon disabled return NULL. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_global_beacon_status.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.get_global_beacon_status — Dataset.get_global_beacon_status","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_global_beacon_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.get_global_beacon_status — Dataset.get_global_beacon_status","text":"","code":"if (FALSE) { Dataset.get_global_beacon_status(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_or_create_by_full_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.get_or_create_by_full_path — Dataset.get_or_create_by_full_path","title":"Dataset.get_or_create_by_full_path — Dataset.get_or_create_by_full_path","text":"helper function get create dataset full path.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_or_create_by_full_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.get_or_create_by_full_path — Dataset.get_or_create_by_full_path","text":"","code":"Dataset.get_or_create_by_full_path(full_path, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_or_create_by_full_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.get_or_create_by_full_path — Dataset.get_or_create_by_full_path","text":"full_path valid full path dataset. env (optional) Custom client environment. ... Additional dataset creation parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_or_create_by_full_path.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.get_or_create_by_full_path — Dataset.get_or_create_by_full_path","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.get_or_create_by_full_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.get_or_create_by_full_path — Dataset.get_or_create_by_full_path","text":"","code":"if (FALSE) { Dataset.get_or_create_by_full_path(\"MyVault:/folder/sub-folder/dataset\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a dataset. — Dataset","title":"fetches a dataset. — Dataset","text":"fetches dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a dataset. — Dataset","text":"","code":"Dataset(   dataset_id = NULL,   full_path = NULL,   path = NULL,   vault_id = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a dataset. — Dataset","text":"dataset_id Dataset ID string full_path Object full path, including account, vault path. path path object, folders (e.g. \"/d1/d2/foo.csv\"). vault_id Vault ID string (e.g. \"19\"). conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.query.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.query — Dataset.query","title":"Dataset.query — Dataset.query","text":"Queries QuartzBio EDP dataset returns R data frame containing records. Returns single page results otherwise (default).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.query — Dataset.query","text":"","code":"Dataset.query(   id,   paginate = FALSE,   use_field_titles = TRUE,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.query — Dataset.query","text":"id ID QuartzBio EDP dataset, Dataset object. paginate set TRUE, retrieves records (memory permitting). use_field_titles (optional) Use field title instead field name query. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.query.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.query — Dataset.query","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.query — Dataset.query","text":"","code":"if (FALSE) { Dataset.query(\"12345678790\", paginate=TRUE) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.retrieve — Dataset.retrieve","title":"Dataset.retrieve — Dataset.retrieve","text":"Retrieves metadata specific dataset QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.retrieve — Dataset.retrieve","text":"","code":"Dataset.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.retrieve — Dataset.retrieve","text":"id String ID QuartzBio EDP dataset env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.retrieve — Dataset.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.retrieve — Dataset.retrieve","text":"","code":"if (FALSE) { Dataset.retrieve(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.template.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.template — Dataset.template","title":"Dataset.template — Dataset.template","text":"Retrieves template dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.template — Dataset.template","text":"","code":"Dataset.template(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.template — Dataset.template","text":"id String ID QuartzBio EDP dataset env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.template.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.template — Dataset.template","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.template — Dataset.template","text":"","code":"if (FALSE) { Dataset.template(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.update.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset.update — Dataset.update","title":"Dataset.update — Dataset.update","text":"Updates attributes existing dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset.update — Dataset.update","text":"","code":"Dataset.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset.update — Dataset.update","text":"id ID dataset update. env (optional) Custom client environment. ... Dataset attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset.update — Dataset.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset.update — Dataset.update","text":"","code":"if (FALSE) { Dataset.update(                id=\"1234\",                name=\"New Dataset Name\",               ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.all.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetCommit.all — DatasetCommit.all","title":"DatasetCommit.all — DatasetCommit.all","text":"Retrieves metadata dataset commits QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetCommit.all — DatasetCommit.all","text":"","code":"DatasetCommit.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetCommit.all — DatasetCommit.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetCommit.all — DatasetCommit.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetCommit.all — DatasetCommit.all","text":"","code":"if (FALSE) { DatasetCommit.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetCommit.delete — DatasetCommit.delete","title":"DatasetCommit.delete — DatasetCommit.delete","text":"Deletes specific dataset commit QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetCommit.delete — DatasetCommit.delete","text":"","code":"DatasetCommit.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetCommit.delete — DatasetCommit.delete","text":"id String ID full name QuartzBio EDP dataset commit. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetCommit.delete — DatasetCommit.delete","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetCommit.retrieve — DatasetCommit.retrieve","title":"DatasetCommit.retrieve — DatasetCommit.retrieve","text":"Retrieves metadata specific dataset commit QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetCommit.retrieve — DatasetCommit.retrieve","text":"","code":"DatasetCommit.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetCommit.retrieve — DatasetCommit.retrieve","text":"id String ID QuartzBio EDP dataset commit. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetCommit.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetCommit.retrieve — DatasetCommit.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.all.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetExport.all — DatasetExport.all","title":"DatasetExport.all — DatasetExport.all","text":"Retrieves metadata dataset exports QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetExport.all — DatasetExport.all","text":"","code":"DatasetExport.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetExport.all — DatasetExport.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetExport.all — DatasetExport.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetExport.all — DatasetExport.all","text":"","code":"if (FALSE) { DatasetExport.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.create.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetExport.create — DatasetExport.create","title":"DatasetExport.create — DatasetExport.create","text":"Create new dataset export.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetExport.create — DatasetExport.create","text":"","code":"DatasetExport.create(   dataset_id,   format = \"json\",   params = list(),   follow = FALSE,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetExport.create — DatasetExport.create","text":"dataset_id target dataset ID. format (optional) export format (default: json). params (optional) Query parameters export. follow (default: FALSE) Follow export task completes. env (optional) Custom client environment. ... (optional) Additional dataset export parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetExport.create — DatasetExport.create","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetExport.delete — DatasetExport.delete","title":"DatasetExport.delete — DatasetExport.delete","text":"Deletes specific dataset export QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetExport.delete — DatasetExport.delete","text":"","code":"DatasetExport.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetExport.delete — DatasetExport.delete","text":"id String ID QuartzBio EDP dataset export. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetExport.delete — DatasetExport.delete","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.get_download_url.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetExport.get_download_url — DatasetExport.get_download_url","title":"DatasetExport.get_download_url — DatasetExport.get_download_url","text":"Helper method get download URL dataset export.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.get_download_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetExport.get_download_url — DatasetExport.get_download_url","text":"","code":"DatasetExport.get_download_url(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.get_download_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetExport.get_download_url — DatasetExport.get_download_url","text":"id ID dataset export. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.get_download_url.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetExport.get_download_url — DatasetExport.get_download_url","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.get_download_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetExport.get_download_url — DatasetExport.get_download_url","text":"","code":"if (FALSE) { DatasetExport.get_download_url(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetExport.retrieve — DatasetExport.retrieve","title":"DatasetExport.retrieve — DatasetExport.retrieve","text":"Retrieves metadata specific dataset export QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetExport.retrieve — DatasetExport.retrieve","text":"","code":"DatasetExport.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetExport.retrieve — DatasetExport.retrieve","text":"id String ID QuartzBio EDP dataset export. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetExport.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetExport.retrieve — DatasetExport.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.all.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetField.all — DatasetField.all","title":"DatasetField.all — DatasetField.all","text":"Retrieves metadata dataset fields QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetField.all — DatasetField.all","text":"","code":"DatasetField.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetField.all — DatasetField.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetField.all — DatasetField.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetField.all — DatasetField.all","text":"","code":"if (FALSE) { DatasetField.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.create.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetField.create — DatasetField.create","title":"DatasetField.create — DatasetField.create","text":"Create new dataset field.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetField.create — DatasetField.create","text":"","code":"DatasetField.create(   dataset_id,   name,   data_type = \"auto\",   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetField.create — DatasetField.create","text":"dataset_id dataset ID. name name dataset field. data_type (optional) data type field (default: auto). env (optional) Custom client environment. ... (optional) Additional dataset import attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetField.create — DatasetField.create","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.facets.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetField.facets — DatasetField.facets","title":"DatasetField.facets — DatasetField.facets","text":"Returns facets given dataset field.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.facets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetField.facets — DatasetField.facets","text":"","code":"DatasetField.facets(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.facets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetField.facets — DatasetField.facets","text":"id String ID dataset field. env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.facets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetField.facets — DatasetField.facets","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.facets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetField.facets — DatasetField.facets","text":"","code":"if (FALSE) { DatasetField.facets(691) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a field metadata of a dataset by ID or (datasetid, field_name) — DatasetField","title":"fetches a field metadata of a dataset by ID or (datasetid, field_name) — DatasetField","text":"fetches field metadata dataset ID (datasetid, field_name)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a field metadata of a dataset by ID or (datasetid, field_name) — DatasetField","text":"","code":"DatasetField(   field_id = NULL,   dataset_id = NULL,   name = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a field metadata of a dataset by ID or (datasetid, field_name) — DatasetField","text":"field_id Field object ID. dataset_id Dataset ID string name name field conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches a field metadata of a dataset by ID or (datasetid, field_name) — DatasetField","text":"DatasetField object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetField.retrieve — DatasetField.retrieve","title":"DatasetField.retrieve — DatasetField.retrieve","text":"Retrieves metadata specific dataset field.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetField.retrieve — DatasetField.retrieve","text":"","code":"DatasetField.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetField.retrieve — DatasetField.retrieve","text":"id String ID dataset field. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetField.retrieve — DatasetField.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetField.retrieve — DatasetField.retrieve","text":"","code":"if (FALSE) { DatasetField.retrieve(691) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.update.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetField.update — DatasetField.update","title":"DatasetField.update — DatasetField.update","text":"Updates attributes existing dataset field. NOTE: data_type field changed.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetField.update — DatasetField.update","text":"","code":"DatasetField.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetField.update — DatasetField.update","text":"id ID dataset field update. env (optional) Custom client environment. ... Dataset field attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetField.update — DatasetField.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetField.update — DatasetField.update","text":"","code":"if (FALSE) { DatasetField.update(                     id=\"1234\",                     title=\"New Field Title\"                    ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField_create.html","id":null,"dir":"Reference","previous_headings":"","what":"creates a new Dataset Field. — DatasetField_create","title":"creates a new Dataset Field. — DatasetField_create","text":"creates new Dataset Field.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates a new Dataset Field. — DatasetField_create","text":"","code":"DatasetField_create(   dataset_id,   data_type,   name,   title = NULL,   description = NULL,   ordering = NULL,   entity_type = NULL,   expression = NULL,   is_hidden = NULL,   is_list = NULL,   url_template = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates a new Dataset Field. — DatasetField_create","text":"dataset_id Dataset ID string data_type data type. one : auto (default) boolean - Either True, False, null date - string ISO 8601 format, example: 2017-03-29T14:52:01 double - double-precision 64-bit IEEE 754 floating point. float - single-precision 32-bit IEEE 754 floating point. integer     signed 32-bit integer minimum value -231 maximum value 231-1. long     signed 64-bit integer minimum value -263 maximum value 263-1. object     key/value, JSON-like object, similar Python dictionary. string     valid UTF-8 string 32,766 characters length. text     valid UTF-8 string length, indexed full-text search. blob     valid UTF-8 string length, indexed search. name name field title field's display name, shown UI CSV/Excel exports, string description description string. ordering order column appears retrieving data dataset. Order 0-based. Default 0. entity_type valid entity type: dataset - Dataset ID (510110013133189334) gene - gene (EGFR) genomic_region - genomic region (GRCH38-7-55019017-55211628) literature - PubMed ID (19915526) sample - sample identifier (TCGA-02-0001) variant - genomic variant (GRCH38-7-55181378-55181378-T) expression EDP xpressions Python-like formulas can used pull data datasets, calculate statistics, run advanced algorithms. is_hidden whether field hidden UI. is_list whether result expected list. url_template URL template one \"value\" sections interpolated field value displayed link dataset table. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField_update.html","id":null,"dir":"Reference","previous_headings":"","what":"updates an existing Dataset Field. — DatasetField_update","title":"updates an existing Dataset Field. — DatasetField_update","text":"updates existing Dataset Field.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updates an existing Dataset Field. — DatasetField_update","text":"","code":"DatasetField_update(   field_id,   data_type = NULL,   title = NULL,   description = NULL,   ordering = NULL,   entity_type = NULL,   expression = NULL,   is_hidden = NULL,   is_list = NULL,   url_template = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updates an existing Dataset Field. — DatasetField_update","text":"field_id Field object ID. data_type data type. one : auto (default) boolean - Either True, False, null date - string ISO 8601 format, example: 2017-03-29T14:52:01 double - double-precision 64-bit IEEE 754 floating point. float - single-precision 32-bit IEEE 754 floating point. integer     signed 32-bit integer minimum value -231 maximum value 231-1. long     signed 64-bit integer minimum value -263 maximum value 263-1. object     key/value, JSON-like object, similar Python dictionary. string     valid UTF-8 string 32,766 characters length. text     valid UTF-8 string length, indexed full-text search. blob     valid UTF-8 string length, indexed search. title field's display name, shown UI CSV/Excel exports, string description description string. ordering list fields order/sort results , character vector. entity_type valid entity type: dataset - Dataset ID (510110013133189334) gene - gene (EGFR) genomic_region - genomic region (GRCH38-7-55019017-55211628) literature - PubMed ID (19915526) sample - sample identifier (TCGA-02-0001) variant - genomic variant (GRCH38-7-55181378-55181378-T) expression EDP xpressions Python-like formulas can used pull data datasets, calculate statistics, run advanced algorithms. is_hidden whether field hidden UI. is_list whether result expected list. url_template URL template one \"value\" sections interpolated field value displayed link dataset table. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetField_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"updates an existing Dataset Field. — DatasetField_update","text":"DatasetField object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetFields.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches the fields of a dataset. — DatasetFields","title":"fetches the fields of a dataset. — DatasetFields","text":"fetches fields dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches the fields of a dataset. — DatasetFields","text":"","code":"DatasetFields(   dataset_id,   limit = NULL,   page = NULL,   all = FALSE,   conn = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches the fields of a dataset. — DatasetFields","text":"dataset_id Dataset ID string limit maximum number elements fetch, integer. See also page. page number page fetch, integer. starts 1. See also limit. whether fetch data, iterating needed. conn EDP connection object (named list environment) ... Additional query parameters, passed .request().","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches the fields of a dataset. — DatasetFields","text":"DatasetFieldList object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetFields.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"fetches the fields of a dataset. — DatasetFields","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.all.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetImport.all — DatasetImport.all","title":"DatasetImport.all — DatasetImport.all","text":"Retrieves metadata dataset imports QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetImport.all — DatasetImport.all","text":"","code":"DatasetImport.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetImport.all — DatasetImport.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetImport.all — DatasetImport.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetImport.all — DatasetImport.all","text":"","code":"if (FALSE) { DatasetImport.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.create.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetImport.create — DatasetImport.create","title":"DatasetImport.create — DatasetImport.create","text":"Create new dataset import. Either object_id, manifest, data_records required.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetImport.create — DatasetImport.create","text":"","code":"DatasetImport.create(   dataset_id,   commit_mode = \"append\",   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetImport.create — DatasetImport.create","text":"dataset_id target dataset ID. commit_mode (optional) commit mode (default: append). env (optional) Custom client environment. ... (optional) Additional dataset import attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetImport.create — DatasetImport.create","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetImport.delete — DatasetImport.delete","title":"DatasetImport.delete — DatasetImport.delete","text":"Deletes specific dataset import QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetImport.delete — DatasetImport.delete","text":"","code":"DatasetImport.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetImport.delete — DatasetImport.delete","text":"id String ID QuartzBio EDP dataset import. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetImport.delete — DatasetImport.delete","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetImport.retrieve — DatasetImport.retrieve","title":"DatasetImport.retrieve — DatasetImport.retrieve","text":"Retrieves metadata specific dataset import QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetImport.retrieve — DatasetImport.retrieve","text":"","code":"DatasetImport.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetImport.retrieve — DatasetImport.retrieve","text":"id String ID QuartzBio EDP dataset import. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetImport.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetImport.retrieve — DatasetImport.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.all.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetMigration.all — DatasetMigration.all","title":"DatasetMigration.all — DatasetMigration.all","text":"Retrieves metadata dataset migrations QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetMigration.all — DatasetMigration.all","text":"","code":"DatasetMigration.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetMigration.all — DatasetMigration.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetMigration.all — DatasetMigration.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetMigration.all — DatasetMigration.all","text":"","code":"if (FALSE) { DatasetMigration.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.create.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetMigration.create — DatasetMigration.create","title":"DatasetMigration.create — DatasetMigration.create","text":"Create new dataset migration.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetMigration.create — DatasetMigration.create","text":"","code":"DatasetMigration.create(   source_id,   target_id,   commit_mode = \"append\",   source_params = NULL,   target_fields = NULL,   include_errors = FALSE,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetMigration.create — DatasetMigration.create","text":"source_id source dataset ID. target_id target dataset ID. commit_mode (optional) commit mode (default: append). source_params (optional) query parameters used source dataset. target_fields (optional) list valid dataset fields add override target dataset. include_errors (optional) TRUE, new field (_errors) added record containing expression evaluation errors (default: FALSE). env (optional) Custom client environment. ... (optional) Additional dataset migration attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetMigration.create — DatasetMigration.create","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetMigration.delete — DatasetMigration.delete","title":"DatasetMigration.delete — DatasetMigration.delete","text":"Deletes specific dataset migration QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetMigration.delete — DatasetMigration.delete","text":"","code":"DatasetMigration.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetMigration.delete — DatasetMigration.delete","text":"id String ID QuartzBio EDP dataset migration. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetMigration.delete — DatasetMigration.delete","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetMigration.retrieve — DatasetMigration.retrieve","title":"DatasetMigration.retrieve — DatasetMigration.retrieve","text":"Retrieves metadata specific dataset migration QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetMigration.retrieve — DatasetMigration.retrieve","text":"","code":"DatasetMigration.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetMigration.retrieve — DatasetMigration.retrieve","text":"id String ID QuartzBio EDP dataset migration. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetMigration.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetMigration.retrieve — DatasetMigration.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.all.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetTemplate.all — DatasetTemplate.all","title":"DatasetTemplate.all — DatasetTemplate.all","text":"Retrieves metadata dataset templates QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetTemplate.all — DatasetTemplate.all","text":"","code":"DatasetTemplate.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetTemplate.all — DatasetTemplate.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetTemplate.all — DatasetTemplate.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetTemplate.all — DatasetTemplate.all","text":"","code":"if (FALSE) { DatasetTemplate.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.create.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetTemplate.create — DatasetTemplate.create","title":"DatasetTemplate.create — DatasetTemplate.create","text":"Create QuartzBio EDP dataset template.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetTemplate.create — DatasetTemplate.create","text":"","code":"DatasetTemplate.create(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetTemplate.create — DatasetTemplate.create","text":"env (optional) Custom client environment. ... (optional) Dataset template attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetTemplate.create — DatasetTemplate.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetTemplate.create — DatasetTemplate.create","text":"","code":"if (FALSE) { DatasetTemplate.create(name=\"My Dataset Template\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetTemplate.delete — DatasetTemplate.delete","title":"DatasetTemplate.delete — DatasetTemplate.delete","text":"Deletes specific dataset template QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetTemplate.delete — DatasetTemplate.delete","text":"","code":"DatasetTemplate.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetTemplate.delete — DatasetTemplate.delete","text":"id String ID full name QuartzBio EDP dataset template. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetTemplate.delete — DatasetTemplate.delete","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetTemplate.retrieve — DatasetTemplate.retrieve","title":"DatasetTemplate.retrieve — DatasetTemplate.retrieve","text":"Retrieves metadata specific dataset template QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetTemplate.retrieve — DatasetTemplate.retrieve","text":"","code":"DatasetTemplate.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetTemplate.retrieve — DatasetTemplate.retrieve","text":"id String ID QuartzBio EDP dataset template. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetTemplate.retrieve — DatasetTemplate.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.update.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetTemplate.update — DatasetTemplate.update","title":"DatasetTemplate.update — DatasetTemplate.update","text":"Updates attributes existing dataset template.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetTemplate.update — DatasetTemplate.update","text":"","code":"DatasetTemplate.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetTemplate.update — DatasetTemplate.update","text":"id ID dataset template update. env (optional) Custom client environment. ... Dataset template attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetTemplate.update — DatasetTemplate.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/DatasetTemplate.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetTemplate.update — DatasetTemplate.update","text":"","code":"if (FALSE) { DatasetTemplate.update(                id=\"1234\",                name=\"New Template Name\",               ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_create.html","id":null,"dir":"Reference","previous_headings":"","what":"creates a new Dataset. — Dataset_create","title":"creates a new Dataset. — Dataset_create","text":"creates new Dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates a new Dataset. — Dataset_create","text":"","code":"Dataset_create(   vault_id,   vault_path,   description = NULL,   metadata = NULL,   tags = NULL,   storage_class = NULL,   capacity = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates a new Dataset. — Dataset_create","text":"vault_id Vault ID string (e.g. \"19\"). vault_path Vault path, string (e.g. \"/d1/d2/foo.csv\") description description string. metadata metadata named list. tags list tags character vector. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. capacity dataset capacity level (small, medium, large). conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"creates a new Dataset. — Dataset_create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_import.html","id":null,"dir":"Reference","previous_headings":"","what":"imports data into an existing dataset — Dataset_import","title":"imports data into an existing dataset — Dataset_import","text":"imports data existing dataset","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"imports data into an existing dataset — Dataset_import","text":"","code":"Dataset_import(   dataset_id,   commit_mode = NULL,   records = NULL,   df = NULL,   file_id = NULL,   target_fields = infer_fields_from_df(df),   sync = FALSE,   conn = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"imports data into an existing dataset — Dataset_import","text":"dataset_id Dataset ID string commit_mode four commit modes can selected depending scenario: append (default), overwrite, upsert, delete. records data annotate data frame. df data import data.frame file_id file Object ID. target_fields list valid dataset fields create override import, character vector. sync whether proceed synchronous mode, .e wait sub tasks finish returning. conn EDP connection object (named list environment) ... passed Task_wait_for_completion()","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_query.html","id":null,"dir":"Reference","previous_headings":"","what":"queries data into a dataset. — Dataset_query","title":"queries data into a dataset. — Dataset_query","text":"queries data dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queries data into a dataset. — Dataset_query","text":"","code":"Dataset_query(   dataset_id,   filters = NULL,   facets = NULL,   fields = NULL,   exclude_fields = c(\"_id\", \"_commit\"),   ordering = NULL,   query = NULL,   limit = 10000,   offset = NULL,   all = FALSE,   meta = TRUE,   parallel = FALSE,   workers = 4,   conn = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Dataset_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queries data into a dataset. — Dataset_query","text":"dataset_id Dataset ID string filters filter expression JSON string. facets valid facets objects. fields fields add. exclude_fields list fields exclude results, character vector. ordering list fields order/sort results , character vector. query string matches objects whose path contains string. limit maximum number elements fetch, integer. See also page. offset file offset (starts 0). whether fetch data, iterating needed. meta whether retrieve fields meta data information properly format, reorder rename data frame parallel whether parallelize API calls. workers parallel mode, number concurrent requests make conn EDP connection object (named list environment) ... Additional query parameters, passed .request().","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a list of datasets. — Datasets","title":"fetches a list of datasets. — Datasets","text":"fetches list datasets.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a list of datasets. — Datasets","text":"","code":"Datasets(   vault_id = NULL,   vault_name = NULL,   vault_full_path = NULL,   filename = NULL,   path = NULL,   object_type = NULL,   depth = NULL,   query = NULL,   regex = NULL,   glob = NULL,   ancestor_id = NULL,   min_distance = NULL,   tag = NULL,   storage_class = NULL,   limit = NULL,   page = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a list of datasets. — Datasets","text":"vault_id Vault ID string (e.g. \"19\"). vault_name Vault name string (e.g. \"Public\"). vault_full_path Vault full path, string (e.g. \"quartzbio:Public\") filename Object filename, without parent folder (e.g. \"foo.csv\") path path object, folders (e.g. \"/d1/d2/foo.csv\"). object_type type object, one  \"file\", \"folder\", \"dataset\". depth depth object Vault integer (0 means root) query string matches objects whose path contains string. regex regular expression, string, filter results . glob glob (full path wildcard characters) searches objects matching paths (case-insensitive). ancestor_id object ID ancestor, filtering. min_distance used conjuction ancestor_id filter include objects minimum distance ancestor. tag single tag string. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. limit maximum number elements fetch, integer. See also page. page number page fetch, integer. starts 1. See also limit. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Expression.evaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a QuartzBio EDP expression. — Expression.evaluate","title":"Evaluate a QuartzBio EDP expression. — Expression.evaluate","text":"Evaluate QuartzBio EDP expression.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Expression.evaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a QuartzBio EDP expression. — Expression.evaluate","text":"","code":"Expression.evaluate(   expression,   data_type = \"string\",   is_list = FALSE,   data = NULL,   raw = FALSE,   env = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Expression.evaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a QuartzBio EDP expression. — Expression.evaluate","text":"expression EDP expression string. data_type data type cast expression result. is_list whether result expected list. data TODO raw whether return raw response. env Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Expression.evaluate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a QuartzBio EDP expression. — Expression.evaluate","text":"","code":"if (FALSE) { Expression.evaluate(\"1 + 1\", data_type = \"integer\", is_list = FALSE) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a file by id, full_path or (vault_id, path) — File","title":"fetches a file by id, full_path or (vault_id, path) — File","text":"fetches file id, full_path (vault_id, path)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a file by id, full_path or (vault_id, path) — File","text":"","code":"File(   id = NULL,   full_path = NULL,   path = NULL,   vault_id = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a file by id, full_path or (vault_id, path) — File","text":"id File ID full_path Object full path, including account, vault path. path path object, folders (e.g. \"/d1/d2/foo.csv\"). vault_id Vault ID string (e.g. \"19\"). conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches a file by id, full_path or (vault_id, path) — File","text":"file info Object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_download.html","id":null,"dir":"Reference","previous_headings":"","what":"utility function that downloads an EDP File into a local file — File_download","title":"utility function that downloads an EDP File into a local file — File_download","text":"utility function downloads EDP File local file","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility function that downloads an EDP File into a local file — File_download","text":"","code":"File_download(file_id, local_path, conn = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility function that downloads an EDP File into a local file — File_download","text":"file_id file Object ID. local_path path local file. conn EDP connection object (named list environment) ... passed File_download_content()","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility function that downloads an EDP File into a local file — File_download","text":"response","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_get_download_url.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches the download URL of a file. — File_get_download_url","title":"fetches the download URL of a file. — File_get_download_url","text":"URL can used download file using HTTP client, utils::download.file()","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_get_download_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches the download URL of a file. — File_get_download_url","text":"","code":"File_get_download_url(file_id, conn = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_get_download_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches the download URL of a file. — File_get_download_url","text":"file_id file Object ID. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_get_download_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches the download URL of a file. — File_get_download_url","text":"download URL string","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_query.html","id":null,"dir":"Reference","previous_headings":"","what":"queries the content of a file. — File_query","title":"queries the content of a file. — File_query","text":"file parsable EDP. Otherwise can use File_download()","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"queries the content of a file. — File_query","text":"","code":"File_query(   id,   filters = NULL,   limit = 10000,   offset = NULL,   all = FALSE,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"queries the content of a file. — File_query","text":"id File ID filters filter expression JSON string. limit maximum number elements fetch, integer. See also page. offset file offset (starts 0). whether fetch data, iterating needed. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_read.html","id":null,"dir":"Reference","previous_headings":"","what":"convenience function to download a file into memory, just a wrapper over File_download() — File_read","title":"convenience function to download a file into memory, just a wrapper over File_download() — File_read","text":"convenience function download file memory, just wrapper File_download()","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convenience function to download a file into memory, just a wrapper over File_download() — File_read","text":"","code":"File_read(file_id, local_path = tempfile(), conn = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convenience function to download a file into memory, just a wrapper over File_download() — File_read","text":"file_id file Object ID. local_path download file. Used testing purposes. conn EDP connection object (named list environment) ... passed File_download()","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convenience function to download a file into memory, just a wrapper over File_download() — File_read","text":"file content","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"uploads a file — File_upload","title":"uploads a file — File_upload","text":"uploads file","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uploads a file — File_upload","text":"","code":"File_upload(   vault_id,   local_path,   vault_path,   mimetype = mime::guess_type(local_path),   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/File_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"uploads a file — File_upload","text":"vault_id Vault ID string (e.g. \"19\"). local_path path local file. vault_path Vault path, string (e.g. \"/d1/d2/foo.csv\") mimetype MIME type Object. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Files.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a list of files. — Files","title":"fetches a list of files. — Files","text":"fetches list files.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a list of files. — Files","text":"","code":"Files(...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a list of files. — Files","text":"... Arguments passed Objects vault_id Vault ID string (e.g. \"19\"). vault_name Vault name string (e.g. \"Public\"). vault_full_path Vault full path, string (e.g. \"quartzbio:Public\") filename Object filename, without parent folder (e.g. \"foo.csv\") path path object, folders (e.g. \"/d1/d2/foo.csv\"). object_type type object, one  \"file\", \"folder\", \"dataset\". depth depth object Vault integer (0 means root) query string matches objects whose path contains string. regex regular expression, string, filter results . glob glob (full path wildcard characters) searches objects matching paths (case-insensitive). ancestor_id object ID ancestor, filtering. min_distance used conjuction ancestor_id filter include objects minimum distance ancestor. tag single tag string. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. limit maximum number elements fetch, integer. See also page. page number page fetch, integer. starts 1. See also limit. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folder.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a folder by id, full_path or (vault_id, path) — Folder","title":"fetches a folder by id, full_path or (vault_id, path) — Folder","text":"fetches folder id, full_path (vault_id, path)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a folder by id, full_path or (vault_id, path) — Folder","text":"","code":"Folder(   id = NULL,   full_path = NULL,   path = NULL,   vault_id = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a folder by id, full_path or (vault_id, path) — Folder","text":"id folder ID. full_path Object full path, including account, vault path. path path object, folders (e.g. \"/d1/d2/foo.csv\"). vault_id Vault ID string (e.g. \"19\"). conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folder_create.html","id":null,"dir":"Reference","previous_headings":"","what":"creates  a folder. — Folder_create","title":"creates  a folder. — Folder_create","text":"creates  folder.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folder_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates  a folder. — Folder_create","text":"","code":"Folder_create(   vault_id,   path,   recursive = TRUE,   parent_folder_id = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folder_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates  a folder. — Folder_create","text":"vault_id Vault ID string (e.g. \"19\"). path folder path create recursive whether recursively create parent folders exist. parent_folder_id ID parent folder. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folder_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates  a folder. — Folder_create","text":"folder Object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folders.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a list of folders. — Folders","title":"fetches a list of folders. — Folders","text":"fetches list folders.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a list of folders. — Folders","text":"","code":"Folders(...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a list of folders. — Folders","text":"... Arguments passed Objects vault_id Vault ID string (e.g. \"19\"). vault_name Vault name string (e.g. \"Public\"). vault_full_path Vault full path, string (e.g. \"quartzbio:Public\") filename Object filename, without parent folder (e.g. \"foo.csv\") path path object, folders (e.g. \"/d1/d2/foo.csv\"). object_type type object, one  \"file\", \"folder\", \"dataset\". depth depth object Vault integer (0 means root) query string matches objects whose path contains string. regex regular expression, string, filter results . glob glob (full path wildcard characters) searches objects matching paths (case-insensitive). ancestor_id object ID ancestor, filtering. min_distance used conjuction ancestor_id filter include objects minimum distance ancestor. tag single tag string. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. limit maximum number elements fetch, integer. See also page. page number page fetch, integer. starts 1. See also limit. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Folders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches a list of folders. — Folders","text":"folders ObjectList","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.facets.html","id":null,"dir":"Reference","previous_headings":"","what":"GlobalSearch.facets — GlobalSearch.facets","title":"GlobalSearch.facets — GlobalSearch.facets","text":"Performs Global Search based provided filters, entities, queries, returns R data frame containing facets results API response.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.facets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GlobalSearch.facets — GlobalSearch.facets","text":"","code":"GlobalSearch.facets(facets, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.facets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GlobalSearch.facets — GlobalSearch.facets","text":"facets Facets list. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, entities, query).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.facets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GlobalSearch.facets — GlobalSearch.facets","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.facets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GlobalSearch.facets — GlobalSearch.facets","text":"","code":"if (FALSE) { GlobalSearch.facets(facets=\"study\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.request.html","id":null,"dir":"Reference","previous_headings":"","what":"GlobalSearch.request — GlobalSearch.request","title":"GlobalSearch.request — GlobalSearch.request","text":"Performs single Global Search API request provided filters, queries entities. single request retrieve one page results (based limit parameter). Use GlobalSearch.search() retrieve pages results. Returns full API response (containing attributes: results, vaults, subjects, subjects_count, total)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GlobalSearch.request — GlobalSearch.request","text":"","code":"GlobalSearch.request(   query = NULL,   filters,   entities,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GlobalSearch.request — GlobalSearch.request","text":"query (optional) Advanced search query. filters (optional) Low-level filter specification. entities (optional) Low-level entity specification. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.request.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GlobalSearch.request — GlobalSearch.request","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GlobalSearch.request — GlobalSearch.request","text":"","code":"if (FALSE) { # No filters are applied GlobalSearch.request()  # Global Beacon search GlobalSearch.request(entities = '[[\"gene\",\"BRCA2\"]]')  # Type filter (only vaults) GlobalSearch.request(filters = '[{\"and\":[[\"type__in\",[\"vault\"]]]}]')  # Advanced search GlobalSearch.request(query = \"fuji\")   # Multiple filters and entities GlobalSearch.request(   entities = '[[\"gene\",\"BRCA2\"]]',   filters = '[{                \"and\": [                       {\"and\": [                          [\"created_at__range\",[\"2021-11-28\",\"2021-12-28\"]]]},                          [\"type__in\",[\"dataset\"]]                      ]              }]' ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.search.html","id":null,"dir":"Reference","previous_headings":"","what":"GlobalSearch.search — GlobalSearch.search","title":"GlobalSearch.search — GlobalSearch.search","text":"Performs Global Search based provided filters, entities, queries, returns R data frame containing results API response. Returns single page results otherwise (default).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GlobalSearch.search — GlobalSearch.search","text":"","code":"GlobalSearch.search(paginate = FALSE, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GlobalSearch.search — GlobalSearch.search","text":"paginate set TRUE, retrieves records (memory permitting). env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, entities, query, limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GlobalSearch.search — GlobalSearch.search","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GlobalSearch.search — GlobalSearch.search","text":"","code":"if (FALSE) { # No filters applied GlobalSearch.search()  #Global Beacon search GlobalSearch.search(entities = '[[\"gene\",\"BRCA2\"]]')  GlobalSearch.search(filters = '[{\"and\":[[\"type__in\",[\"vault\"]]]}]')  # Advanced search GlobalSearch.search(query = \"fuji\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"GlobalSearch.subjects — GlobalSearch.subjects","title":"GlobalSearch.subjects — GlobalSearch.subjects","text":"Performs Global Search based provided filters, entities, queries, returns R data frame containing subjects API response.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GlobalSearch.subjects — GlobalSearch.subjects","text":"","code":"GlobalSearch.subjects(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GlobalSearch.subjects — GlobalSearch.subjects","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, entities, query, limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GlobalSearch.subjects — GlobalSearch.subjects","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GlobalSearch.subjects — GlobalSearch.subjects","text":"","code":"if (FALSE) { GlobalSearch.subjects(entities = '[[\"gene\",\"BRCA2\"]]') }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects_count.html","id":null,"dir":"Reference","previous_headings":"","what":"GlobalSearch.subjects_count — GlobalSearch.subjects_count","title":"GlobalSearch.subjects_count — GlobalSearch.subjects_count","text":"Performs Global Search based provided filters, entities, queries, returns total number subjects API response.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GlobalSearch.subjects_count — GlobalSearch.subjects_count","text":"","code":"GlobalSearch.subjects_count(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GlobalSearch.subjects_count — GlobalSearch.subjects_count","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, entities, query, limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects_count.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GlobalSearch.subjects_count — GlobalSearch.subjects_count","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/GlobalSearch.subjects_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GlobalSearch.subjects_count — GlobalSearch.subjects_count","text":"","code":"if (FALSE) { GlobalSearch.subjects_count(entities = '[[\"gene\",\"BRCA2\"]]') }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the metadata about all objects on EDP accessible to the current user. — Object.all","title":"Retrieves the metadata about all objects on EDP accessible to the current user. — Object.all","text":"Retrieves metadata objects EDP accessible current user.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the metadata about all objects on EDP accessible to the current user. — Object.all","text":"","code":"Object.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the metadata about all objects on EDP accessible to the current user. — Object.all","text":"env Custom client environment. ... Additional query parameters, passed .request().","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.create.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.create — Object.create","title":"Object.create — Object.create","text":"Create QuartzBio EDP object.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.create — Object.create","text":"","code":"Object.create(   vault_id,   parent_object_id,   object_type,   filename,   env = get_connection(),   ... )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.create — Object.create","text":"vault_id target vault ID. parent_object_id ID parent object (folder) NULL vault root. object_type type object (.e. \"folder\"). filename filename (.e. name) object. env (optional) Custom client environment. ... (optional) Additional object attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.create — Object.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.create — Object.create","text":"","code":"if (FALSE) { Object.create(               vault_id=\"1234567890\",               parent_object_id=NULL,               object_type=\"folder\",               filename=\"My Folder\"               ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.data — Object.data","title":"Object.data — Object.data","text":"Returns one page documents QuartzBio EDP file (object) processes response.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.data — Object.data","text":"","code":"Object.data(id, filters, col.names = NULL, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.data — Object.data","text":"id ID QuartzBio EDP file (vault object). filters (optional) Query filters. col.names (optional) Force data frame column name ordering. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.data — Object.data","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.data — Object.data","text":"","code":"if (FALSE) { Object.data(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.delete — Object.delete","title":"Object.delete — Object.delete","text":"Delete specific object QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.delete — Object.delete","text":"","code":"Object.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.delete — Object.delete","text":"id ID object. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.delete — Object.delete","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.delete — Object.delete","text":"","code":"if (FALSE) { Object.delete(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.disable_global_beacon.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.disable_global_beacon — Object.disable_global_beacon","title":"Object.disable_global_beacon — Object.disable_global_beacon","text":"Disables Global Beacon specified dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.disable_global_beacon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.disable_global_beacon — Object.disable_global_beacon","text":"","code":"Object.disable_global_beacon(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.disable_global_beacon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.disable_global_beacon — Object.disable_global_beacon","text":"id ID QuartzBio EDP dataset. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.disable_global_beacon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.disable_global_beacon — Object.disable_global_beacon","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.disable_global_beacon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.disable_global_beacon — Object.disable_global_beacon","text":"","code":"if (FALSE) { Object.disable_global_beacon(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.enable_global_beacon.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.enable_global_beacon — Object.enable_global_beacon","title":"Object.enable_global_beacon — Object.enable_global_beacon","text":"Enables Global Beacon specified dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.enable_global_beacon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.enable_global_beacon — Object.enable_global_beacon","text":"","code":"Object.enable_global_beacon(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.enable_global_beacon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.enable_global_beacon — Object.enable_global_beacon","text":"id ID QuartzBio EDP dataset. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.enable_global_beacon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.enable_global_beacon — Object.enable_global_beacon","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.enable_global_beacon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.enable_global_beacon — Object.enable_global_beacon","text":"","code":"if (FALSE) { Object.enable_global_beacon(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.fields — Object.fields","title":"Object.fields — Object.fields","text":"Retrieves list fields file (JSON, CSV, TSV).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.fields — Object.fields","text":"","code":"Object.fields(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.fields — Object.fields","text":"id ID QuartzBio EDP file (vault object). env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.fields.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.fields — Object.fields","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.fields — Object.fields","text":"","code":"if (FALSE) { Object.fields(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_full_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.get_by_full_path — Object.get_by_full_path","title":"Object.get_by_full_path — Object.get_by_full_path","text":"helper function get object QuartzBio EDP full path.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_full_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.get_by_full_path — Object.get_by_full_path","text":"","code":"Object.get_by_full_path(full_path, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_full_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.get_by_full_path — Object.get_by_full_path","text":"full_path full path object. env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_full_path.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.get_by_full_path — Object.get_by_full_path","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_full_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.get_by_full_path — Object.get_by_full_path","text":"","code":"if (FALSE) { Object.get_by_full_path(\"solvebio:public:/ClinVar\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.get_by_path — Object.get_by_path","title":"Object.get_by_path — Object.get_by_path","text":"helper function get object QuartzBio EDP path. Used pass-function Vault methods.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.get_by_path — Object.get_by_path","text":"","code":"Object.get_by_path(path, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.get_by_path — Object.get_by_path","text":"path path object, relative vault. env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_path.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.get_by_path — Object.get_by_path","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_by_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.get_by_path — Object.get_by_path","text":"","code":"if (FALSE) { Object.get_by_path(\"/ClinVar\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_download_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.get_download_url — Object.get_download_url","title":"Object.get_download_url — Object.get_download_url","text":"Helper method get download URL file object.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_download_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.get_download_url — Object.get_download_url","text":"","code":"Object.get_download_url(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_download_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.get_download_url — Object.get_download_url","text":"id ID object. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_download_url.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.get_download_url — Object.get_download_url","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_download_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.get_download_url — Object.get_download_url","text":"","code":"if (FALSE) { Object.get_download_url(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_global_beacon_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.get_global_beacon_status — Object.get_global_beacon_status","title":"Object.get_global_beacon_status — Object.get_global_beacon_status","text":"Retrieves global beacon status specified dataset.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_global_beacon_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.get_global_beacon_status — Object.get_global_beacon_status","text":"","code":"Object.get_global_beacon_status(   id,   raise_on_disabled = FALSE,   env = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_global_beacon_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.get_global_beacon_status — Object.get_global_beacon_status","text":"id ID QuartzBio EDP dataset. raise_on_disabled Whether raise exception Global Beacon disabled return NULL. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_global_beacon_status.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.get_global_beacon_status — Object.get_global_beacon_status","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_global_beacon_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.get_global_beacon_status — Object.get_global_beacon_status","text":"","code":"if (FALSE) { Object.get_global_beacon_status(\"1234567890\") Object.get_global_beacon_status(\"1234567890\", raise_on_disabled=TRUE) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_or_upload_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.get_or_upload_file — Object.get_or_upload_file","title":"Object.get_or_upload_file — Object.get_or_upload_file","text":"Upload local file vault QuartzBio EDP yet exist (name, provided path). vault path provided parent directory uploaded file. Accepts arguments Object.upload_file.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_or_upload_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.get_or_upload_file — Object.get_or_upload_file","text":"","code":"Object.get_or_upload_file(   local_path,   vault_id,   vault_path,   filename,   env = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_or_upload_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.get_or_upload_file — Object.get_or_upload_file","text":"local_path path local file vault_id QuartzBio EDP vault ID vault_path remote path vault filename (optional) filename uploaded file vault (default: basename local_path) env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_or_upload_file.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.get_or_upload_file — Object.get_or_upload_file","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.get_or_upload_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.get_or_upload_file — Object.get_or_upload_file","text":"","code":"if (FALSE) { Object.get_or_upload_file(\"my_file.json.gz\", vault$id, \"/parent/directory/\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches an object. — Object","title":"fetches an object. — Object","text":"fetches object.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches an object. — Object","text":"","code":"Object(   id = NULL,   full_path = NULL,   path = NULL,   vault_id = NULL,   object_type = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches an object. — Object","text":"id Object ID full_path Object full path, including account, vault path. path path object, folders (e.g. \"/d1/d2/foo.csv\"). vault_id Vault ID string (e.g. \"19\"). object_type type object, one  \"file\", \"folder\", \"dataset\". conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.query.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.query — Object.query","title":"Object.query — Object.query","text":"Queries QuartzBio EDP file (vault object) returns R data frame containing records. Returns single page results otherwise (default).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.query — Object.query","text":"","code":"Object.query(id, paginate = FALSE, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.query — Object.query","text":"id ID QuartzBio EDP file (vault object). paginate set TRUE, retrieves records (memory permitting). env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. filters, limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.query.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.query — Object.query","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.query — Object.query","text":"","code":"if (FALSE) { Object.query(\"12345678790\", paginate=TRUE) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.retrieve — Object.retrieve","title":"Object.retrieve — Object.retrieve","text":"Retrieves metadata specific object QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.retrieve — Object.retrieve","text":"","code":"Object.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.retrieve — Object.retrieve","text":"id ID object. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.retrieve — Object.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.retrieve — Object.retrieve","text":"","code":"if (FALSE) { Object.retrieve(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.update.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.update — Object.update","title":"Object.update — Object.update","text":"Updates attributes existing vault object.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.update — Object.update","text":"","code":"Object.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.update — Object.update","text":"id ID vault update. env (optional) Custom client environment. ... Object attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.update — Object.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.update — Object.update","text":"","code":"if (FALSE) { Object.update(               id=\"1234\",               filename=\"New Name\",              ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.upload_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Object.upload_file — Object.upload_file","title":"Object.upload_file — Object.upload_file","text":"Upload local file vault QuartzBio EDP. vault path provided parent directory uploaded file.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.upload_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object.upload_file — Object.upload_file","text":"","code":"Object.upload_file(   local_path,   vault_id,   vault_path,   filename,   env = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.upload_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object.upload_file — Object.upload_file","text":"local_path path local file vault_id QuartzBio EDP vault ID vault_path remote path vault filename (optional) filename uploaded file vault (default: basename local_path) env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.upload_file.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object.upload_file — Object.upload_file","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object.upload_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object.upload_file — Object.upload_file","text":"","code":"if (FALSE) { Object.upload_file(\"my_file.json.gz\", vault$id, \"/parent/directory/\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_create.html","id":null,"dir":"Reference","previous_headings":"","what":"creates an Object. — Object_create","title":"creates an Object. — Object_create","text":"creates Object.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates an Object. — Object_create","text":"","code":"Object_create(   vault_id,   filename,   object_type,   parent_object_id = NULL,   description = NULL,   metadata = NULL,   tags = NULL,   storage_class = NULL,   capacity = NULL,   mimetype = NULL,   size = NULL,   md5 = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates an Object. — Object_create","text":"vault_id Vault ID string (e.g. \"19\"). filename Object filename, without parent folder (e.g. \"foo.csv\") object_type type object, one  \"file\", \"folder\", \"dataset\". parent_object_id ID parent Object. description description string. metadata metadata named list. tags list tags character vector. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. capacity dataset capacity level (small, medium, large). mimetype MIME type Object. size size object. md5 MD5 fingerprint, string. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates an Object. — Object_create","text":"object list class Object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_update.html","id":null,"dir":"Reference","previous_headings":"","what":"updates an Object. — Object_update","title":"updates an Object. — Object_update","text":"updates Object.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updates an Object. — Object_update","text":"","code":"Object_update(   id,   filename = NULL,   object_type = NULL,   parent_object_id = NULL,   description = NULL,   metadata = NULL,   tags = NULL,   storage_class = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updates an Object. — Object_update","text":"id Object ID filename Object filename, without parent folder (e.g. \"foo.csv\") object_type type object, one  \"file\", \"folder\", \"dataset\". parent_object_id ID parent Object. description description string. metadata metadata named list. tags list tags character vector. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Object_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"updates an Object. — Object_update","text":"object list class Object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Objects.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a list of objects (files, folders, datasets) — Objects","title":"fetches a list of objects (files, folders, datasets) — Objects","text":"fetches list objects (files, folders, datasets)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a list of objects (files, folders, datasets) — Objects","text":"","code":"Objects(   vault_id = NULL,   vault_name = NULL,   vault_full_path = NULL,   filename = NULL,   path = NULL,   object_type = NULL,   depth = NULL,   query = NULL,   regex = NULL,   glob = NULL,   ancestor_id = NULL,   min_distance = NULL,   tag = NULL,   storage_class = NULL,   limit = NULL,   page = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a list of objects (files, folders, datasets) — Objects","text":"vault_id Vault ID string (e.g. \"19\"). vault_name Vault name string (e.g. \"Public\"). vault_full_path Vault full path, string (e.g. \"quartzbio:Public\") filename Object filename, without parent folder (e.g. \"foo.csv\") path path object, folders (e.g. \"/d1/d2/foo.csv\"). object_type type object, one  \"file\", \"folder\", \"dataset\". depth depth object Vault integer (0 means root) query string matches objects whose path contains string. regex regular expression, string, filter results . glob glob (full path wildcard characters) searches objects matching paths (case-insensitive). ancestor_id object ID ancestor, filtering. min_distance used conjuction ancestor_id filter include objects minimum distance ancestor. tag single tag string. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. limit maximum number elements fetch, integer. See also page. page number page fetch, integer. starts 1. See also limit. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.all.html","id":null,"dir":"Reference","previous_headings":"","what":"SavedQuery.all — SavedQuery.all","title":"SavedQuery.all — SavedQuery.all","text":"Retrieves saved queries QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SavedQuery.all — SavedQuery.all","text":"","code":"SavedQuery.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SavedQuery.all — SavedQuery.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. page).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SavedQuery.all — SavedQuery.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SavedQuery.all — SavedQuery.all","text":"","code":"if (FALSE) { SavedQuery.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.create.html","id":null,"dir":"Reference","previous_headings":"","what":"SavedQuery.create — SavedQuery.create","title":"SavedQuery.create — SavedQuery.create","text":"Create QuartzBio EDP saved query.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SavedQuery.create — SavedQuery.create","text":"","code":"SavedQuery.create(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SavedQuery.create — SavedQuery.create","text":"env (optional) Custom client environment. ... (optional) Saved query attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SavedQuery.create — SavedQuery.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SavedQuery.create — SavedQuery.create","text":"","code":"if (FALSE) { SavedQuery.create(name=\"My Dataset Template\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"SavedQuery.delete — SavedQuery.delete","title":"SavedQuery.delete — SavedQuery.delete","text":"Deletes specific saved query QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SavedQuery.delete — SavedQuery.delete","text":"","code":"SavedQuery.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SavedQuery.delete — SavedQuery.delete","text":"id String ID QuartzBio EDP saved query. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SavedQuery.delete — SavedQuery.delete","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"SavedQuery.retrieve — SavedQuery.retrieve","title":"SavedQuery.retrieve — SavedQuery.retrieve","text":"Retrieves specific saved query QuartzBio EDP ID.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SavedQuery.retrieve — SavedQuery.retrieve","text":"","code":"SavedQuery.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SavedQuery.retrieve — SavedQuery.retrieve","text":"id String ID QuartzBio EDP saved query. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SavedQuery.retrieve — SavedQuery.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.update.html","id":null,"dir":"Reference","previous_headings":"","what":"SavedQuery.update — SavedQuery.update","title":"SavedQuery.update — SavedQuery.update","text":"Updates attributes existing saved query.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SavedQuery.update — SavedQuery.update","text":"","code":"SavedQuery.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SavedQuery.update — SavedQuery.update","text":"id ID saved query update. env (optional) Custom client environment. ... Saved query attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SavedQuery.update — SavedQuery.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/SavedQuery.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SavedQuery.update — SavedQuery.update","text":"","code":"if (FALSE) { SavedQuery.update(                id=\"1234\",                name=\"New query Name\",               ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Task.all — Task.all","title":"Task.all — Task.all","text":"Retrieves metadata tasks QuartzBio EDP accessible current user.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Task.all — Task.all","text":"","code":"Task.all(env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Task.all — Task.all","text":"env (optional) Custom client environment. ... (optional) Additional query parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Task.all — Task.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Task.all — Task.all","text":"","code":"if (FALSE) { Task.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.follow.html","id":null,"dir":"Reference","previous_headings":"","what":"Task.follow — Task.follow","title":"Task.follow — Task.follow","text":"helper function follow specific task gets completed.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.follow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Task.follow — Task.follow","text":"","code":"Task.follow(id, env = get_connection(), interval = 2)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.follow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Task.follow — Task.follow","text":"id String ID task. env (optional) Custom client environment. interval Delay seconds completion status query","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.follow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Task.follow — Task.follow","text":"task object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.follow.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Task.follow — Task.follow","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.follow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Task.follow — Task.follow","text":"","code":"if (FALSE) { Task.follow(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a task. — Task","title":"fetches a task. — Task","text":"fetches task.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a task. — Task","text":"","code":"Task(task_id, conn = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a task. — Task","text":"task_id (ECS) Task ID string. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches a task. — Task","text":"tasks ECSTask object, NULL none found.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Task.retrieve — Task.retrieve","title":"Task.retrieve — Task.retrieve","text":"Retrieves metadata specific task QuartzBio EDP.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Task.retrieve — Task.retrieve","text":"","code":"Task.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Task.retrieve — Task.retrieve","text":"id ID task. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Task.retrieve — Task.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Task.retrieve — Task.retrieve","text":"","code":"if (FALSE) { Task.retrieve(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task_wait_for_completion.html","id":null,"dir":"Reference","previous_headings":"","what":"Waits for a task to be completed (or failed). — Task_wait_for_completion","title":"Waits for a task to be completed (or failed). — Task_wait_for_completion","text":"N.B: using retries == 0 immediately timeout return FALSE. convenient unit testing example","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task_wait_for_completion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Waits for a task to be completed (or failed). — Task_wait_for_completion","text":"","code":"Task_wait_for_completion(   task_id,   interval = 3,   retries = 30,   recursive = TRUE,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task_wait_for_completion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Waits for a task to be completed (or failed). — Task_wait_for_completion","text":"task_id (ECS) Task ID string. interval time seconds wait retrying retries number attempts perform check task completion recursive whether also wait subtasks conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Task_wait_for_completion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Waits for a task to be completed (or failed). — Task_wait_for_completion","text":"TRUE task finished (completed failed), FALSE number retries exceeded (~ timeout).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Tasks.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a list of tasks. — Tasks","title":"fetches a list of tasks. — Tasks","text":"fetches list tasks.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Tasks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a list of tasks. — Tasks","text":"","code":"Tasks(   target_object_id = NULL,   parent_task_id = NULL,   status = NULL,   alive = NULL,   limit = NULL,   page = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Tasks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a list of tasks. — Tasks","text":"target_object_id object ID fetch tasks parent_task_id find children task status Task status, one (running, queued, pending, completed, failed ) alive whether select Tasks alive, .e. finished failed. limit maximum number elements fetch, integer. See also page. page number page fetch, integer. starts 1. See also limit. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Tasks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches a list of tasks. — Tasks","text":"list Tasks ECSTaskList object.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/User.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches  user information. — User","title":"fetches  user information. — User","text":"fetches  user information.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/User.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches  user information. — User","text":"","code":"User(conn = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/User.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches  user information. — User","text":"conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/User.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches  user information. — User","text":"connected user information User object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/User.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves information about the current user — User.retrieve","title":"Retrieves information about the current user — User.retrieve","text":"Retrieves information current user","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/User.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves information about the current user — User.retrieve","text":"","code":"User.retrieve(env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/User.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves information about the current user — User.retrieve","text":"env Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.all — Vault.all","title":"Vault.all — Vault.all","text":"Retrieves metadata accessible vaults.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.all — Vault.all","text":"","code":"Vault.all(..., env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.all — Vault.all","text":"... (optional) Additional query parameters (e.g. limit, offset). env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.all — Vault.all","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.all — Vault.all","text":"","code":"if (FALSE) { Vault.all() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.create — Vault.create","title":"Vault.create — Vault.create","text":"Create new QuartzBio EDP vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.create — Vault.create","text":"","code":"Vault.create(name, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.create — Vault.create","text":"name unique name vault. env (optional) Custom client environment. ... (optional) Additional vault attributes.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.create — Vault.create","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.create — Vault.create","text":"","code":"if (FALSE) { Vault.create(name=\"my-domain:MyVault\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.create_dataset — Vault.create_dataset","title":"Vault.create_dataset — Vault.create_dataset","text":"Create new dataset vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.create_dataset — Vault.create_dataset","text":"","code":"Vault.create_dataset(id, path, name, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.create_dataset — Vault.create_dataset","text":"id ID vault. path path dataset, within vault. name name (filename) dataset. env (optional) Custom client environment. ... (optional) Additional dataset creation parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_dataset.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.create_dataset — Vault.create_dataset","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.create_dataset — Vault.create_dataset","text":"","code":"if (FALSE) { vault = Vault.get_personal_vault() Vault.create_dataset(vault$id, path=\"/\", name=\"My Dataset\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.create_folder — Vault.create_folder","title":"Vault.create_folder — Vault.create_folder","text":"Create new folder vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.create_folder — Vault.create_folder","text":"","code":"Vault.create_folder(id, path, recursive = FALSE, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.create_folder — Vault.create_folder","text":"id ID vault. path path folder, within vault. recursive Create parent directories yet exist (default: FALSE). env (optional) Custom client environment. ... (optional) Additional folder creation parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_folder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.create_folder — Vault.create_folder","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.create_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.create_folder — Vault.create_folder","text":"","code":"if (FALSE) { vault = Vault.get_personal_vault() Vault.create_folder(vault$id, \"/My Folder\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.datasets — Vault.datasets","title":"Vault.datasets — Vault.datasets","text":"Retrieves datasets specific vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.datasets — Vault.datasets","text":"","code":"Vault.datasets(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.datasets — Vault.datasets","text":"id ID vault. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.datasets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.datasets — Vault.datasets","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.datasets — Vault.datasets","text":"","code":"if (FALSE) { vault = Vault.get_personal_vault() Vault.datasets(vault$id) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.delete — Vault.delete","title":"Vault.delete — Vault.delete","text":"Delete specific vault QuartzBio EDP. operation undone.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.delete — Vault.delete","text":"","code":"Vault.delete(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.delete — Vault.delete","text":"id String ID QuartzBio EDP vault. env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.delete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.delete — Vault.delete","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.delete — Vault.delete","text":"","code":"if (FALSE) { Vault.delete(\"1\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.files.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.files — Vault.files","title":"Vault.files — Vault.files","text":"Retrieves files specific vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.files — Vault.files","text":"","code":"Vault.files(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.files — Vault.files","text":"id ID vault. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.files.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.files — Vault.files","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.files — Vault.files","text":"","code":"if (FALSE) { vault = Vault.get_personal_vault() Vault.files(vault$id) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.folders.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.folders — Vault.folders","title":"Vault.folders — Vault.folders","text":"Retrieves folders specific vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.folders — Vault.folders","text":"","code":"Vault.folders(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.folders — Vault.folders","text":"id ID vault. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.folders.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.folders — Vault.folders","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.folders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.folders — Vault.folders","text":"","code":"if (FALSE) { vault = Vault.get_personal_vault() Vault.folders(vault$id) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_by_full_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.get_by_full_path — Vault.get_by_full_path","title":"Vault.get_by_full_path — Vault.get_by_full_path","text":"Retrieves specific vault full path (domain:vault).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_by_full_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.get_by_full_path — Vault.get_by_full_path","text":"","code":"Vault.get_by_full_path(full_path, verbose = TRUE, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_by_full_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.get_by_full_path — Vault.get_by_full_path","text":"full_path full path QuartzBio EDP vault. verbose Print warning/error messages (default: TRUE). env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_by_full_path.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.get_by_full_path — Vault.get_by_full_path","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_by_full_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.get_by_full_path — Vault.get_by_full_path","text":"","code":"if (FALSE) { Vault.get_by_full_path(\"QuartzBio EDP:Public\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_or_create_by_full_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.get_or_create_by_full_path — Vault.get_or_create_by_full_path","title":"Vault.get_or_create_by_full_path — Vault.get_or_create_by_full_path","text":"Retrieves creates specific vault full path (domain:vault).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_or_create_by_full_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.get_or_create_by_full_path — Vault.get_or_create_by_full_path","text":"","code":"Vault.get_or_create_by_full_path(full_path, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_or_create_by_full_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.get_or_create_by_full_path — Vault.get_or_create_by_full_path","text":"full_path full path QuartzBio EDP vault. env (optional) Custom client environment. ... (optional) Additional parameters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_or_create_by_full_path.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.get_or_create_by_full_path — Vault.get_or_create_by_full_path","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_or_create_by_full_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.get_or_create_by_full_path — Vault.get_or_create_by_full_path","text":"","code":"if (FALSE) { Vault.get_or_create_by_full_path(\"My New Vault\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_personal_vault.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.get_personal_vault — Vault.get_personal_vault","title":"Vault.get_personal_vault — Vault.get_personal_vault","text":"Retrieves current users\"s personal, private vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_personal_vault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.get_personal_vault — Vault.get_personal_vault","text":"","code":"Vault.get_personal_vault(env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_personal_vault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.get_personal_vault — Vault.get_personal_vault","text":"env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_personal_vault.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.get_personal_vault — Vault.get_personal_vault","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.get_personal_vault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.get_personal_vault — Vault.get_personal_vault","text":"","code":"if (FALSE) { Vault.get_personal_vault() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a vault — Vault","title":"fetches a vault — Vault","text":"N.B: called without id, full_path name, fetches personal vault connected user. dies multiple vaults matched","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a vault — Vault","text":"","code":"Vault(id = NULL, full_path = NULL, name = NULL, conn = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a vault — Vault","text":"id Vault ID object fetch full_path full path vault fetch name name vault fetch conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetches a vault — Vault","text":"vault list class Vault, NULL matching vault found","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fetches a vault — Vault","text":"","code":"if (FALSE) { # with no argument, fetch the connected user personal vault v <- Vault()  # by id v2 <- Vault(v$id)  # by full_path v2 <- Vault(full_path = v$full_path)  # by name v2 <- Vault(name = \"Public\")  }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.objects — Vault.objects","title":"Vault.objects — Vault.objects","text":"Retrieves objects specific vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.objects — Vault.objects","text":"","code":"Vault.objects(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.objects — Vault.objects","text":"id ID vault. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.objects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.objects — Vault.objects","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.objects — Vault.objects","text":"","code":"if (FALSE) { vault = Vault.get_personal_vault() Vault.objects(vault$id) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.retrieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.retrieve — Vault.retrieve","title":"Vault.retrieve — Vault.retrieve","text":"Retrieves metadata specific QuartzBio EDP vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.retrieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.retrieve — Vault.retrieve","text":"","code":"Vault.retrieve(id, env = get_connection())"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.retrieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.retrieve — Vault.retrieve","text":"id String ID QuartzBio EDP vault env (optional) Custom client environment.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.retrieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.retrieve — Vault.retrieve","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.retrieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.retrieve — Vault.retrieve","text":"","code":"if (FALSE) { Vault.retrieve(\"1234567890\") }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.search.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.search — Vault.search","title":"Vault.search — Vault.search","text":"Search objects specific vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.search — Vault.search","text":"","code":"Vault.search(id, query, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.search — Vault.search","text":"id ID vault. query search query. env (optional) Custom client environment. ... (optional) Additional query parameters (e.g. limit, offset).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.search — Vault.search","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.search — Vault.search","text":"","code":"if (FALSE) { vault = Vault.get_personal_vault() Vault.search('test') }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.update.html","id":null,"dir":"Reference","previous_headings":"","what":"Vault.update — Vault.update","title":"Vault.update — Vault.update","text":"Updates attributes existing vault.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vault.update — Vault.update","text":"","code":"Vault.update(id, env = get_connection(), ...)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vault.update — Vault.update","text":"id ID vault update. env (optional) Custom client environment. ... Vault attributes change.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vault.update — Vault.update","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vault.update — Vault.update","text":"","code":"if (FALSE) { Vault.update(              id=\"1234\",              name=\"New Vault Name\",             ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_create.html","id":null,"dir":"Reference","previous_headings":"","what":"creates a new EDP vault or updates an existing one. — Vault_create","title":"creates a new EDP vault or updates an existing one. — Vault_create","text":"cf https://docs.solvebio.com/reference/vaults/vaults/#create","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates a new EDP vault or updates an existing one. — Vault_create","text":"","code":"Vault_create(   name,   description = NULL,   metadata = NULL,   tags = NULL,   storage_class = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates a new EDP vault or updates an existing one. — Vault_create","text":"name vault name create, string. description description string. metadata metadata named list. tags list tags character vector. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"creates a new EDP vault or updates an existing one. — Vault_create","text":"id NULL, create new vault, otherwise update vault corresponding id","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"creates a new EDP vault or updates an existing one. — Vault_create","text":"","code":"if (FALSE) { # simplest form v <- Vault_create('my.new.vault')  # using all params v <- Vault_create(name = 'my.new.vault',     description = 'This is my own vault',     metadata = list(a = 1, b = 'toto', sublist = list(x = 'str')),     tags = c('TEST', 'DATA'),     storage_class = 'Performance',     conn = conn)  }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_update.html","id":null,"dir":"Reference","previous_headings":"","what":"updates a vault — Vault_update","title":"updates a vault — Vault_update","text":"N.B: updated vault properties overwritten, merged! id NULL, create new vault","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"updates a vault — Vault_update","text":"","code":"Vault_update(   id,   name = NULL,   description = NULL,   metadata = NULL,   tags = NULL,   storage_class = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"updates a vault — Vault_update","text":"id Vault ID object fetch name vault name create, string. description description string. metadata metadata named list. tags list tags character vector. storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"updates a vault — Vault_update","text":"Vault object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vault_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"updates a vault — Vault_update","text":"","code":"if (FALSE) {   v2 <- Vault_update(v$id, name = name, description = 'desc',        metadata = list(meta1 = 'toto'), storage_class = 'Performance', tags = 'A') # using methods v3 <- update(v2, name = name, storage_class = 'Temporary') v4 <- update(vault_id, tags = LETTERS[1:5]) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vaults.html","id":null,"dir":"Reference","previous_headings":"","what":"fetches a list of vaults — Vaults","title":"fetches a list of vaults — Vaults","text":"fetches list vaults","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetches a list of vaults — Vaults","text":"","code":"Vaults(   vault_type = NULL,   tags = NULL,   user_id = NULL,   storage_class = NULL,   account_id = NULL,   page = NULL,   limit = NULL,   conn = get_connection() )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/Vaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetches a list of vaults — Vaults","text":"vault_type type vault ('user', 'general') string tags list tags character vector. user_id user id (User object) string storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. account_id Account ID string. page number page fetch, integer. starts 1. See also limit. limit maximum number elements fetch, integer. See also page. conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/autoconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"tries to connect, using environment variables or the default profile — autoconnect","title":"tries to connect, using environment variables or the default profile — autoconnect","text":"tries connect, using environment variables default profile","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/autoconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tries to connect, using environment variables or the default profile — autoconnect","text":"","code":"autoconnect(check = FALSE)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/autoconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tries to connect, using environment variables or the default profile — autoconnect","text":"check whether check connection, mostly debugging purposes","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/autoconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tries to connect, using environment variables or the default profile — autoconnect","text":"connection","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect.html","id":null,"dir":"Reference","previous_headings":"","what":"connect to the QuartzBio EDP API and return the connection — connect","title":"connect to the QuartzBio EDP API and return the connection — connect","text":"connect QuartzBio EDP API return connection","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connect to the QuartzBio EDP API and return the connection — connect","text":"","code":"connect(   secret = get_env(\"EDP_API_SECRET\", get_env(\"SOLVEBIO_ACCESS_TOKEN\",     get_env(\"SOLVEBIO_API_KEY\"))),   host = get_env(\"EDP_API_HOST\", get_env(\"SOLVEBIO_API_HOST\", EDP_DEFAULT_API_HOST)),   check = TRUE )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connect to the QuartzBio EDP API and return the connection — connect","text":"secret QuartzBio EDP API key  token string. Defaults EDP_API_SECRET environment variable set, otherwise legacy SOLVEBIO_ACCESS_TOKEN var, SOLVEBIO_API_KEY var. host QuartzBio EDP API host string. Defaults EDP_API_HOST environment variable set, otherwise legacy SOLVEBIO_API_HOST var. check whether check connection, mostly debugging purposes","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"connect to the QuartzBio EDP API and return the connection — connect","text":"connection object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"connect to the QuartzBio EDP API and return the connection — connect","text":"","code":"if (FALSE) {    #  using API key    conn <- connect('MYKEY')    # using env vars    conn <- connect()    # using token and explicit host    conn <- connect('MYTOKEN', 'https://xxxx.yy.com') }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect_with_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"connect to the QuartzBio EDP API using a saved profile — connect_with_profile","title":"connect to the QuartzBio EDP API using a saved profile — connect_with_profile","text":"connect QuartzBio EDP API using saved profile","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect_with_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connect to the QuartzBio EDP API using a saved profile — connect_with_profile","text":"","code":"connect_with_profile(..., check = TRUE)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/connect_with_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connect to the QuartzBio EDP API using a saved profile — connect_with_profile","text":"... Arguments passed read_connection_profile profile name profile, string path path connection profiles file, string check whether check connection, mostly debugging purposes","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_all.html","id":null,"dir":"Reference","previous_headings":"","what":"fetch all the pages for a possibly incomplete paginated API result — fetch_all","title":"fetch all the pages for a possibly incomplete paginated API result — fetch_all","text":"fetch pages possibly incomplete paginated API result","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetch all the pages for a possibly incomplete paginated API result — fetch_all","text":"","code":"fetch_all(x, ..., parallel = FALSE, workers = 4, verbose = FALSE)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetch all the pages for a possibly incomplete paginated API result — fetch_all","text":"x API result ... passed future.apply::future_lapply() parallel whether parallelize API calls. workers parallel mode, number concurrent requests make verbose whether output debugging information, mostly development","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetch all the pages for a possibly incomplete paginated API result — fetch_all","text":"object resulting combining current object/page subsequent pages","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_next.html","id":null,"dir":"Reference","previous_headings":"","what":"fetch the next page of data if any — fetch_next","title":"fetch the next page of data if any — fetch_next","text":"fetch next page data ","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_next.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetch the next page of data if any — fetch_next","text":"","code":"fetch_next(x)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_next.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetch the next page of data if any — fetch_next","text":"x API result","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_next.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetch the next page of data if any — fetch_next","text":"next page data, NULL none","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_prev.html","id":null,"dir":"Reference","previous_headings":"","what":"fetch the previous page of data if any — fetch_prev","title":"fetch the previous page of data if any — fetch_prev","text":"fetch previous page data ","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_prev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fetch the previous page of data if any — fetch_prev","text":"","code":"fetch_prev(x)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_prev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fetch the previous page of data if any — fetch_prev","text":"x API result","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/fetch_prev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fetch the previous page of data if any — fetch_prev","text":"previous page data, NULL none","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/filters.html","id":null,"dir":"Reference","previous_headings":"","what":"parses the maths-like syntax of filters. — filters","title":"parses the maths-like syntax of filters. — filters","text":"parses maths-like syntax filters.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parses the maths-like syntax of filters. — filters","text":"","code":"filters(x)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parses the maths-like syntax of filters. — filters","text":"x filters string parse","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/filters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parses the maths-like syntax of filters. — filters","text":"download URL string","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/generics.html","id":null,"dir":"Reference","previous_headings":"","what":"deletes an object from EDP — All generics","title":"deletes an object from EDP — All generics","text":"deletes object EDP fetches object using ID fetches vault related object","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deletes an object from EDP — All generics","text":"","code":"delete(x, conn = attr(x, \"connection\"))  fetch(x, conn = attr(x, \"connection\"))  fetch_vaults(x, conn = attr(x, \"connection\"))"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deletes an object from EDP — All generics","text":"x object delete conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/generics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"deletes an object from EDP — All generics","text":"decorated object vault, NULL  applicable","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/get_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"get the default connection if any — get_connection","title":"get the default connection if any — get_connection","text":"get default connection ","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/get_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the default connection if any — get_connection","text":"","code":"get_connection(auto = TRUE)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/get_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the default connection if any — get_connection","text":"auto whether automatically use autoconnect() default connection yet set","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/login.html","id":null,"dir":"Reference","previous_headings":"","what":"login — login","title":"login — login","text":"Store verify QuartzBio EDP credentials.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/login.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"login — login","text":"","code":"login(   api_key = Sys.getenv(\"SOLVEBIO_API_KEY\"),   api_token = Sys.getenv(\"SOLVEBIO_ACCESS_TOKEN\"),   api_host = Sys.getenv(\"SOLVEBIO_API_HOST\") )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/login.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"login — login","text":"api_key QuartzBio EDP API key api_token QuartzBio EDP API token api_host QuartzBio EDP API host (default: https://api.solvebio.com)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/login.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"login — login","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/login.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"login — login","text":"","code":"if (FALSE) { login() }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/old_params.html","id":null,"dir":"Reference","previous_headings":"","what":"shared old roxygen params — old_params","title":"shared old roxygen params — old_params","text":"shared old roxygen params","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/old_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shared old roxygen params — old_params","text":"client_id client ID application. conn EDP connection object (named list environment) data TODO data_type data type cast expression result. env Custom client environment. expression EDP expression string. fields fields add. include_errors whether include errors output. is_list whether result expected list. raw whether return raw response. records data annotate data frame. ... Additional query parameters, passed .request().","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/old_params.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"shared old roxygen params — old_params","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"shared roxygen params — params","title":"shared roxygen params — params","text":"shared roxygen params","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shared roxygen params — params","text":"account_id Account ID string. alive whether select Tasks alive, .e. finished failed. whether fetch data, iterating needed. ancestor_id object ID ancestor, filtering. as_data_frame whether convert results data frame. capacity dataset capacity level (small, medium, large). client_id client ID application. commit_mode four commit modes can selected depending scenario: append (default), overwrite, upsert, delete. conn EDP connection object (named list environment) dataset_id Dataset ID string data_type data type. one : auto (default) boolean - Either True, False, null date - string ISO 8601 format, example: 2017-03-29T14:52:01 double - double-precision 64-bit IEEE 754 floating point. float - single-precision 32-bit IEEE 754 floating point. integer     signed 32-bit integer minimum value -231 maximum value 231-1. long     signed 64-bit integer minimum value -263 maximum value 263-1. object     key/value, JSON-like object, similar Python dictionary. string     valid UTF-8 string 32,766 characters length. text     valid UTF-8 string length, indexed full-text search. blob     valid UTF-8 string length, indexed search. depth depth object Vault integer (0 means root) description description string. entity_type valid entity type: dataset - Dataset ID (510110013133189334) gene - gene (EGFR) genomic_region - genomic region (GRCH38-7-55019017-55211628) literature - PubMed ID (19915526) sample - sample identifier (TCGA-02-0001) variant - genomic variant (GRCH38-7-55181378-55181378-T) env Custom client environment. exclude_fields list fields exclude results, character vector. exclude_group_id group ID exclude. expression EDP xpressions Python-like formulas can used pull data datasets, calculate statistics, run advanced algorithms. facets valid facets objects. fields fields add. field_id Field object ID. file_id file Object ID. filename Object filename, without parent folder (e.g. \"foo.csv\") filters filter expression JSON string. full_path Object full path, including account, vault path. glob glob (full path wildcard characters) searches objects matching paths (case-insensitive). include_errors whether include errors output. is_list whether result expected list. limit maximum number elements fetch, integer. See also page. local_path path local file. md5 MD5 fingerprint, string. metadata metadata named list. mimetype MIME type Object. min_distance used conjuction ancestor_id filter include objects minimum distance ancestor. object_type type object, one  \"file\", \"folder\", \"dataset\". ordering list fields order/sort results , character vector. offset file offset (starts 0). page number page fetch, integer. starts 1. See also limit. path path object, folders (e.g. \"/d1/d2/foo.csv\"). parallel whether parallelize API calls. parent_object_id ID parent Object. query string matches objects whose path contains string. raw whether return raw response. records data annotate data frame. regex regular expression, string, filter results . size size object. status Task status, one (running, queued, pending, completed, failed ) storage_class Storage class vault ('Standard', 'Standard-IA', 'Essential', 'Temporary', 'Performance', 'Archive') string. sync whether proceed synchronous mode, .e wait sub tasks finish returning. tag single tag string. tags list tags character vector. target_fields list valid dataset fields create override import, character vector. task_id (ECS) Task ID string. url_template URL template one \"value\" sections interpolated field value displayed link dataset table. user_id user id (User object) string vault_id Vault ID string (e.g. \"19\"). vault_name Vault name string (e.g. \"Public\"). vault_full_path Vault full path, string (e.g. \"quartzbio:Public\") vault_path Vault path, string (e.g. \"/d1/d2/foo.csv\") vault_type type vault ('user', 'general') string workers parallel mode, number concurrent requests make ... Additional query parameters, passed .request().","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/params.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"shared roxygen params — params","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServer.html","id":null,"dir":"Reference","previous_headings":"","what":"protectedServer — protectedServer","title":"protectedServer — protectedServer","text":"Wraps existing Shiny server OAuth2 flow.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"protectedServer — protectedServer","text":"","code":"protectedServer(   server,   client_id,   client_secret = NULL,   base_url = \"https://my.solvebio.com\" )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"protectedServer — protectedServer","text":"server original Shiny server function. client_id application's client ID. client_secret (optional) application's client secret. base_url (optional) Override default login host (default: https://.solvebio.com).","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"protectedServer — protectedServer","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"protectedServer — protectedServer","text":"","code":"if (FALSE) { protectedServer(                 server=server,                 client_id=\"abcd1234\"                 ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServerJS.html","id":null,"dir":"Reference","previous_headings":"","what":"protectedServerUI — protectedServerJS","title":"protectedServerUI — protectedServerJS","text":"Returns ShinyJS-compatible JS code support cookie-based token storage.","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServerJS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"protectedServerUI — protectedServerJS","text":"","code":"protectedServerJS()"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServerJS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"protectedServerUI — protectedServerJS","text":"https://docs.solvebio.com/","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/protectedServerJS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"protectedServerUI — protectedServerJS","text":"","code":"if (FALSE) { jscookie_src <- \"https://cdnjs.cloudflare.com/ajax/libs/js-cookie/2.2.0/js.cookie.js\" ui <- fluidPage(     shiny::tags$head(         shiny::tags$script(src = jscookie_src)     ),     useShinyjs(),     extendShinyjs(text = quartzbio.edp::protectedServerJS(),                   functions = c(\"enableCookieAuth\", \"getCookie\", \"setCookie\", \"rmCookie\")) ) }"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/read_connection_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"read a connection profile — read_connection_profile","title":"read a connection profile — read_connection_profile","text":"read connection profile","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/read_connection_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read a connection profile — read_connection_profile","text":"","code":"read_connection_profile(   profile = get_env(\"EDP_PROFILE\", \"default\"),   path = get_env(\"EDP_CONFIG\", \"~/.qb/edp.json\") )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/read_connection_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read a connection profile — read_connection_profile","text":"profile name profile, string path path connection profiles file, string","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/read_connection_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read a connection profile — read_connection_profile","text":"connection given profile named list, die profile","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/save_connection_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"save a connection profile — save_connection_profile","title":"save a connection profile — save_connection_profile","text":"save connection profile","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/save_connection_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"save a connection profile — save_connection_profile","text":"","code":"save_connection_profile(   conn,   profile = get_env(\"EDP_PROFILE\", \"default\"),   path = get_env(\"EDP_CONFIG\", \"~/.qb/edp.json\"),   overwrite = FALSE )"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/save_connection_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"save a connection profile — save_connection_profile","text":"conn EDP connection object (named list environment) profile name profile, string path path connection profiles file, string overwrite whether overwrite existing profile","code":""},{"path":[]},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/set_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"set the default connection — set_connection","title":"set the default connection — set_connection","text":"N.B: use conn=NULL unset default connection may die bad connection","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/set_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set the default connection — set_connection","text":"","code":"set_connection(conn, check = TRUE)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/set_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set the default connection — set_connection","text":"conn EDP connection object (named list environment) check whether check connection, mostly debugging purposes","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/test_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"test a connection — test_connection","title":"test a connection — test_connection","text":"may die bad connection","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/test_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"test a connection — test_connection","text":"","code":"test_connection(conn)"},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/test_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"test a connection — test_connection","text":"conn EDP connection object (named list environment)","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/reference/test_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"test a connection — test_connection","text":"TRUE iff connection successful","code":""},{"path":"https://quartzbio.github.io/quartzbio.edp/news/index.html","id":"version-099","dir":"Changelog","previous_headings":"","what":"version 0.99","title":"version 0.99","text":"beta version former solvebio R package.Refactoring ot former solvebio R package. migration previous functions new interface started. refactoring connection functions: autoconnect(), set_connection(), connect_with_profile(). refactoring objects interfaces: Datasets(), Files(), Vaults(), Folders(). direct creation Datasets R data.frames. Dataset_query() parallelized (see fetch_next(), fetch_prev() fetch_all() functions). revamp filters() interface. Dataset(), Datasets() DatasetField() Dataset_create() Dataset_import() Dataset_query() File(), Files() File_download(), File_get_download_url() File_query(), File_read(), File_upload() Folder(), Folder_create(), Folders() Object(), Objects() Task(), Tasks() User() Vault(), Vaults() autoconnect() connect(), connect_with_profile() delete() fetch_next(), fetch_prev(),fetch_all() filters() fetch(), fetch_vaults()","code":""}]
